/*--------------------------------------------	CB_Update_Barcodebox_Logos.jsx       (A CoverBuilder Helper Script)	An InDesign CS6 Javascript      	 (Tested in CS6)	Version 1.0		Bruno Herfst 2014        This scipts toggles the publisher logo on the barcode for Penguin Books --------------------------------------------*/#target InDesign;var document    = app.documents.item(0);var myPageItems = toArray(document.allPageItems);var logoList = ["No publisher logo", "Penguin", "Puffin"];var divider = selectWhere("Barcode_Logo_Devider", "label", myPageItems);var FSC_ToplogoList    = selectWhere("BarcodeLogo_FSC_Top",    "label", myPageItems);var FSC_BottomlogoList = selectWhere("BarcodeLogo_FSC_Bottom", "label", myPageItems);var FSC = FSC_ToplogoList.concat(FSC_BottomlogoList);var PUB_Penguin        = selectWhere("BarcodeLogo_Penguin",    "label", myPageItems);var PUB_Puffin         = selectWhere("BarcodeLogo_Puffin",     "label", myPageItems);var PUB = 0;var allLogos = FSC.concat(PUB_Penguin,PUB_Puffin,divider);var VisPenguin = isVissible(PUB_Penguin);var VisPuffin  = isVissible(PUB_Puffin);if(VisPenguin){	PUB = 1;} else if(VisPuffin){	PUB = 2;}// Make the dialog boxvar the_dialog = app.dialogs.add({name:"Change barcode logos"});with(the_dialog.dialogColumns.add()){	with(dialogRows.add()){		var chooseLogo = dropdowns.add({stringList:logoList, selectedIndex:PUB});	}	with(dialogRows.add()){		var FSCLogo = checkboxControls.add({staticLabel:"FSC", checkedState:isVissible(FSC)});	}}if(the_dialog.show() == true){	// Force clean start	hideItems(allLogos);		switch(chooseLogo.selectedIndex){		case 1:			logoName = "BarcodeLogo_Penguin";			break;		case 2:			logoName = "BarcodeLogo_Puffin";			break;		default:			logoName = null;	}		if(logoName != null){		var publogos = selectWhere(logoName, "label", myPageItems);		showItems(publogos);		showItems(divider);	}}else{	the_dialog.destroy();	exit;}function selectWhere(value, key, array){    var i = array.length; var t; var filtered = [];    while(i--){    	t = array[i];		if(t && t[key] == value){			filtered.push(t);		}    }    return filtered;}function toArray(objects){    var i = objects.length; var array = [];    while(i--){            array.push(objects[i]);    }    return array;}// Functions for singular itemsfunction showItem(item){	item.transparencySettings.blendingSettings.opacity = 100;}function hideItem(item){	item.transparencySettings.blendingSettings.opacity = 0;}function itemShown(item){	// Checks if an item is visible	if(item.transparencySettings.blendingSettings.opacity > 0){		return true;	} else {		return false;	}}// Functions for filtered arraysfunction isVissible(filtered){	var i = filtered.length;	while(i--){		if(itemShown(filtered[i])){			return true;		}	}	return false;}function showItems(filtered){	var i = filtered.length;	while(i--){		showItem(filtered[i]);	}}function hideItems(filtered){	var i = filtered.length;	while(i--){		hideItem(filtered[i]);	}}