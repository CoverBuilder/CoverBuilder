// CoverBuilderPS Build Obj// Version 1.1// ToDo Draw Margins (No margin guides!)(function() {	//////////////	// privates //	//////////////	var previewLayerColor = {cyan:0,magenta:0,yellow:0,black:0};	function startBuilding(myApp, C, doSpine) {		typeof(doSpine)		if (typeof(doSpine) != "boolean") {			doSpine = true;		}		var Progressor = $.evalFile(new File(myApp.Module.PSprogress));		// Lets save the original ruler and talk milimeters from now on		var originalUnit = preferences.rulerUnits;		preferences.rulerUnits = Units.MM;		//set name for layers		if (C.measureUnit == 0) {			var measureUnit = " mm";		} else {			var measureUnit = " inch";		}		//set proper sizes		if(C.inExCludeWrap == 1){			C.bleed += C.wrap;		} else {			C.bleed -= C.wrap;		}		if (C.inExCludeFold == 1) {			C.flap += C.fold;		} else if(C.inExCludeFold == 2){			C.width -= C.fold;		}		if (C.inExCludeQB == 1) {			C.width += C.binding;		}		if (C.inExCludeHinge == 1) {			C.width += C.hinge;			C.binding += C.hinge;		}		if ((C.spine == 0) && doSpine) {			var myDocWidth = C.width + (C.flap * 2) + (C.bleed * 2);			var myDocHeight = C.height + (C.bleed * 2);			var myDocName = "Title_CVR[IMG]_" + C.width + "x" + C.height + "_MU";		} else {			var myDocWidth = C.spine + (C.width * 2) + (C.flap * 2) + (C.bleed * 2);			var myDocHeight = C.height + (C.bleed * 2);			var myDocName = "Title_CVR[IMG]_" + C.width + "x" + C.height + "x" + C.spine + "_MU";		}		var scriptName = {			en: "CoverBuilderPS",			de: "CoverBuilderPS"		};		var totalStep = 35;		var currentStep = 0;		// Lets create a new file and assign it to a variable		var myCover = app.documents.add(myDocWidth, myDocHeight, C.ppi, myDocName, NewDocumentMode.RGB);		// Porgress bar widget		var progressor = Progressor.Start(scriptName);		// MAKE GUIDES		var PostScriptPoints = 2.834645669; // Photoshop works with PS points here.		//////////////////////////////////////////////////////////////////////////////////////		// Lets’s make the guides // vertical		//////////////////////////////////////////////////////////////////////////////////////		makeGuide((C.bleed * PostScriptPoints), "Vrtc"); // >end bleed		if (C.flap > 0) { //if flap > 0 then spine < 0			makeGuide((C.bleed + C.flap) * PostScriptPoints, "Vrtc"); // >end flap 1			makeGuide((C.bleed + C.flap - C.fold) * PostScriptPoints, "Vrtc"); // >end foldover 1			makeGuide((C.bleed + C.flap * 2 + C.width * 2 + C.spine) * PostScriptPoints, "Vrtc"); // >end flap 2			makeGuide((C.bleed + C.flap + C.width * 2 + C.spine + C.fold) * PostScriptPoints, "Vrtc"); // >end foldover 2			//margin			if(C.margin.Flaps.ps_guides){				makeGuide((C.bleed + C.margin.Flaps.outside_right) * PostScriptPoints, "Vrtc");				makeGuide((C.bleed + C.flap - C.fold - C.margin.Flaps.inside_left) * PostScriptPoints, "Vrtc");				makeGuide((C.bleed + C.flap * 2 + C.width * 2 + C.spine - C.margin.Flaps.outside_right) * PostScriptPoints, "Vrtc");				makeGuide((C.bleed + C.flap + C.width * 2 + C.spine + C.fold + C.margin.Flaps.inside_left) * PostScriptPoints, "Vrtc");			}		}		makeGuide((C.bleed + C.flap + C.width) * PostScriptPoints, "Vrtc"); // >end CVR4/CVR1		if (C.spine > 0) {			makeGuide((C.bleed + C.flap + C.width + C.spine) * PostScriptPoints, "Vrtc"); // >end spine			makeGuide((C.bleed + C.flap + C.width * 2 + C.spine) * PostScriptPoints, "Vrtc"); // >end cover 1			var addToInside = 0;			if (C.inExCludeHinge = 1){				addToInside += C.hinge;			}			if (C.inExCludeQB = 1){				addToInside = C.binding;			}			if(C.margin.CVR14.ps_guides){				//margins CVR4				makeGuide(((C.bleed + C.flap + C.margin.CVR14.outside_right) * PostScriptPoints), "Vrtc"); // >end outside margin CVR4				makeGuide((C.bleed + C.flap + C.width - addToInside - C.margin.CVR14.inside_left - C.hinge) * PostScriptPoints, "Vrtc"); // >end inside margin CVR4				//margins CVR1				makeGuide(((C.bleed + C.flap + C.width + C.spine + addToInside + C.margin.CVR14.inside_left + C.hinge) * PostScriptPoints), "Vrtc"); // >end outside margin CVR4				makeGuide((C.bleed + C.flap + C.width*2 + C.spine - C.margin.CVR14.outside_right) * PostScriptPoints, "Vrtc"); // >end inside margin CVR4			}		} else {			if(C.margin.CVR14.ps_guides){				//cover 1 only				makeGuide(((C.bleed+C.margin.CVR14.inside_left) * PostScriptPoints), "Vrtc"); // >end outside margin CVR4				makeGuide((C.bleed + C.flap + C.width - C.margin.CVR14.outside_right) * PostScriptPoints, "Vrtc"); // >end inside margin CVR4			}		}		if (C.hinge > 0) {			if (C.spine > 0) {				makeGuide((C.bleed + C.flap + C.width - C.hinge) * PostScriptPoints, "Vrtc");				makeGuide((C.bleed + C.flap + C.width + C.hinge + C.spine) * PostScriptPoints, "Vrtc");			} else {				makeGuide((C.bleed + C.flap + C.hinge) * PostScriptPoints, "Vrtc");			}		}		if (C.binding > 0) {			if (C.spine > 0) {				makeGuide((C.bleed + C.width - C.binding) * PostScriptPoints, "Vrtc");				makeGuide((C.bleed + C.width + C.spine + C.binding) * PostScriptPoints, "Vrtc");			} else {				makeGuide((C.bleed + C.binding) * PostScriptPoints, "Vrtc");			}		}		//////////////////////////////////////////////////////////////////////////////////////		// Lets’s make the guides // horizontal		//////////////////////////////////////////////////////////////////////////////////////		makeGuide(C.bleed * PostScriptPoints, "Hrzn");		makeGuide((C.bleed + C.height) * PostScriptPoints, "Hrzn");		//margins CVR14		if(C.margin.CVR14.ps_guides){			makeGuide((C.bleed + C.margin.CVR14.top) * PostScriptPoints, "Hrzn");			makeGuide((C.bleed + C.height - C.margin.CVR14.bottom) * PostScriptPoints, "Hrzn");		}		//margins Spine		if (C.spine > 0 && C.margin.Spine.ps_guides){			if(C.margin.Spine.top != C.margin.CVR14.top){				makeGuide((C.bleed + C.margin.Spine.top) * PostScriptPoints, "Hrzn");			}			if(C.margin.Spine.bottom != C.margin.CVR14.bottom && C.margin.Spine.ps_guides){				makeGuide((C.bleed + C.height - C.margin.Spine.bottom) * PostScriptPoints, "Hrzn");			}			//v margins spine			makeGuide((C.bleed + C.flap + C.width + C.hinge + C.margin.Spine.inside_left) * PostScriptPoints, "Vrtc");			makeGuide((C.bleed + C.flap + C.width + C.hinge + C.spine - C.margin.Spine.outside_right) * PostScriptPoints, "Vrtc");		}		//margins QB		if (C.QB > 0 && C.margin.QB.ps_guides){			makeGuide((C.bleed + C.margin.QB.top) * PostScriptPoints, "Hrzn");			makeGuide((C.bleed + C.height - C.margin.QB.bottom) * PostScriptPoints, "Hrzn");		}		//margins Flaps		if (C.Flaps > 0 && C.margin.Flaps.ps_guides){			makeGuide((C.bleed + C.margin.Flaps.top) * PostScriptPoints, "Hrzn");			makeGuide((C.bleed + C.height - C.margin.Flaps.bottom) * PostScriptPoints, "Hrzn");		}		if(doSpine){			// Create the preview layer colour			var myColor = new SolidColor;			myColor.cmyk.cyan = previewLayerColor.cyan;			myColor.cmyk.magenta = previewLayerColor.magenta;			myColor.cmyk.yellow = previewLayerColor.yellow;			myColor.cmyk.black = previewLayerColor.black;			//Let’s create the preview layers			if (C.spine == 0) {				if (C.bleed || C.spine > 0) {					var myLayerSet = myCover.layerSets.add();					myLayerSet.name = "Preview";				}				if (C.bleed > 0) {					var myNewLayer = myCover.artLayers.add();					myNewLayer.name = "Bleed (" + C.bleed + measureUnit + ")";					myNewLayer.blendMode = BlendMode.NORMAL;					// Let’s select all					myCover.selection.selectAll();					// And fill with grey					myCover.selection.fill(myColor);					select(						C.bleed, C.bleed,						C.bleed + (C.flap * 2) + C.width, C.bleed,						C.bleed + (C.flap * 2) + C.width, C.height + C.bleed,						C.bleed, C.height + C.bleed					);					deleteSelection(myApp.Settings.add_drop_shadow);					myNewLayer.moveToBeginning(myLayerSet);				}				if (C.hinge > 0) {					var myNewLayer = myCover.artLayers.add();					myNewLayer.name = "Hinge (" + C.hinge + measureUnit + ")";					myNewLayer.blendMode = BlendMode.NORMAL;					myNewLayer.opacity = 25;					select(						C.bleed + C.flap + C.hinge, C.bleed,						C.bleed + C.flap, C.bleed,						C.bleed + C.flap, C.height + C.bleed,						C.bleed + C.flap + C.hinge, C.height + C.bleed					);					myCover.selection.fill(myColor);					myNewLayer.moveToBeginning(myLayerSet);				}			} else {				//Layer Names				var SpineLN = "Spine (" + C.spine + measureUnit + ")";				var Cvr4LN = "Cover4 (" + C.width + "x" + C.height + measureUnit + ")";				var Cvr1LN = "Cover1 (" + C.width + "x" + C.height + measureUnit + ")";				var BleedLN = "Bleed (" + C.bleed + measureUnit + ")";				var FlapLN = "Flaps (" + (C.flap - C.fold) + ")";				var myLayers = new Array(Cvr4LN, SpineLN, Cvr1LN, FlapLN, BleedLN);				//And put them in a set				var myLayerSet = myCover.layerSets.add();				myLayerSet.name = "Preview";				if (C.hinge != 0) {					//make hinge layer					var myNewLayer = myCover.artLayers.add();					myNewLayer.name = "Hinge (" + C.hinge + measureUnit + ")";					myNewLayer.blendMode = BlendMode.NORMAL;					myNewLayer.opacity = 25;					select(						C.bleed + C.flap + C.width - C.hinge, C.bleed,						C.bleed + C.flap + C.width, C.bleed,						C.bleed + C.flap + C.width, C.height + C.bleed,						C.bleed + C.flap + C.width - C.hinge, C.height + C.bleed					);					myCover.selection.fill(myColor);					select(						C.bleed + C.flap + C.width + C.spine, C.bleed,						C.bleed + C.flap + C.width + C.spine + C.hinge, C.bleed,						C.bleed + C.flap + C.width + C.spine + C.hinge, C.height + C.bleed,						C.bleed + C.flap + C.width + C.spine, C.height + C.bleed					);					myCover.selection.fill(myColor);					myNewLayer.moveToBeginning(myLayerSet);				}				for (var i = 0; i < myLayers.length; i++) {					progressor.progress(currentStep += 1, totalStep);					var myLayer = myLayers[i];					var myNewLayer = myCover.artLayers.add();					myNewLayer.name = myLayer;					myNewLayer.blendMode = BlendMode.NORMAL;					// Let’s select all					myCover.selection.selectAll();					// And fill with grey					myCover.selection.fill(myColor);					// select the area you want to preview					if (myLayer == Cvr1LN) {						select(							C.bleed + C.flap + C.width + C.spine, C.bleed,							C.bleed + C.flap + C.width * 2 + C.spine, C.bleed,							C.bleed + C.flap + C.width * 2 + C.spine, C.bleed + C.height,							C.bleed + C.flap + C.width + C.spine, C.bleed + C.height						);						deleteSelection(myApp.Settings.add_drop_shadow);						myNewLayer.moveToBeginning(myLayerSet);					} else if (myLayer == SpineLN) {						select(							C.bleed + C.flap + C.width, C.bleed,							C.bleed + C.flap + C.width + C.spine, C.bleed,							C.bleed + C.flap + C.width + C.spine, C.bleed + C.height,							C.bleed + C.flap + C.width, C.height + C.bleed						);						deleteSelection(myApp.Settings.add_drop_shadow);						myNewLayer.moveToBeginning(myLayerSet);						myNewLayer.visible = false;					} else if (myLayer == Cvr4LN) {						select(							C.bleed + C.flap, C.bleed,							C.bleed + C.flap + C.width, C.bleed,							C.bleed + C.flap + C.width, C.bleed + C.height,							C.bleed + C.flap, C.bleed + C.height						);						deleteSelection(myApp.Settings.add_drop_shadow);						myNewLayer.moveToBeginning(myLayerSet);						myNewLayer.visible = false;					} else if (myLayer == BleedLN && C.bleed > 0) {						select(							C.bleed, C.bleed,							C.width * 2 + C.flap * 2 + C.spine + C.bleed, C.bleed,							C.width * 2 + C.flap * 2 + C.spine + C.bleed, C.bleed + C.height,							C.bleed, C.bleed + C.height						);						deleteSelection(myApp.Settings.add_drop_shadow);						myNewLayer.moveToEnd(myLayerSet);					} else if (myLayer == FlapLN && C.flap > 0) {						select(							C.bleed, C.bleed,							C.bleed + C.flap - C.fold, C.bleed,							C.bleed + C.flap - C.fold, C.bleed + C.height,							C.bleed, C.bleed + C.height						);						deleteSelection(myApp.Settings.add_drop_shadow);						select(							C.bleed + C.flap + C.width * 2 + C.spine + C.fold, C.bleed,							C.bleed + C.flap * 2 + C.width * 2 + C.spine, C.bleed,							C.bleed + C.flap * 2 + C.width * 2 + C.spine, C.bleed + C.height,							C.bleed + C.flap + C.width * 2 + C.spine + C.fold, C.bleed + C.height						);						deleteSelection(myApp.Settings.add_drop_shadow);						myNewLayer.moveToEnd(myLayerSet);						myNewLayer.visible = false;					} else {						myNewLayer.remove();					}				}			}		}		/*		makeGuide function originally found at:		http://blogs.adobe.com/crawlspace/2006/05/installing_and_1.html		*/		function makeGuide(pixelOffSet, orientation) {			progressor.progress(currentStep += 1, totalStep);			var id8 = charIDToTypeID("Mk  ");			var desc4 = new ActionDescriptor();			var id9 = charIDToTypeID("Nw  ");			var desc5 = new ActionDescriptor();			var id10 = charIDToTypeID("Pstn");			var id11 = charIDToTypeID("#Rlt");			desc5.putUnitDouble(id10, id11, pixelOffSet); // integer			var id12 = charIDToTypeID("Ornt");			var id13 = charIDToTypeID("Ornt");			var id14 = charIDToTypeID(orientation); // "Vrtc", "Hrzn"			desc5.putEnumerated(id12, id13, id14);			var id15 = charIDToTypeID("Gd  ");			desc4.putObject(id9, id15, desc5);			executeAction(id8, desc4, DialogModes.NO);		}		// Make a selection		function select(topLeftX, topLeftY, topRightX, topRightY, bottomRightX, bottomRightY, bottomLeftX, bottomLeftY) {			var topLeftX = convertToPixels(topLeftX);			var topLeftY = convertToPixels(topLeftY);			var topRightX = convertToPixels(topRightX);			var topRightY = convertToPixels(topRightY);			var bottomRightX = convertToPixels(bottomRightX);			var bottomRightY = convertToPixels(bottomRightY);			var bottomLeftX = convertToPixels(bottomLeftX);			var bottomLeftY = convertToPixels(bottomLeftY);			var shapeRef = [				// Top Left X,Y				[topLeftX, topLeftY],				// Top Right X,Y				[topRightX, topRightY],				// Bottom Right X,Y				[bottomRightX, bottomRightY],				// Bottom Left X,Y				[bottomLeftX, bottomLeftY]			];			myCover.selection.select(shapeRef);		}		//convert mm to inch, then gets multipliued by PPI to get pixels.		function convertToPixels(mm) {			return (mm / 25.4) * C.ppi;		}		//Delete selection then deselect		function deleteSelection(ShadowBool) {			progressor.progress(currentStep += 5, totalStep);			if (ShadowBool) {				myCover.selection.copy();				myCover.selection.clear();				myCover.paste(true);				//myCover.layers[0].name = myCover.layers[1].name; //set your layer’s name the same				myCover.activeLayer = myCover.layers[0];				activeLayerDropShadow();				//select layer before merging //does not work?				//myCover.activeLayer = myCover.layers[0];				//myCover.activeLayer.select();				myCover.activeLayer = myCover.layers[0];				myCover.activeLayer.fillOpacity = 0;				myCover.activeLayer.blendMode = BlendMode.MULTIPLY;				myCover.activeLayer.merge();			} else {				myCover.selection.clear();			}			myCover.selection.deselect();		}		// safe settings in XMP		function addtoMeta(myCover, C){			if(!documents.length) return;			if (ExternalObject.AdobeXMPScript == undefined) ExternalObject.AdobeXMPScript = new ExternalObject("lib:AdobeXMPScript");			var xmp = new XMPMeta( myCover.xmpMetadata.rawData);			var myNamespace = "http://brunoherfst.com/";			var myPrefix = "CoverBuilder:";			XMPMeta.registerNamespace(myNamespace, myPrefix);			xmp.setProperty(myNamespace, "Settings", String(C.JSONstring));			myCover.xmpMetadata.rawData = xmp.serialize();			return true;		}		var ss = addtoMeta(myCover, C);		if(!ss){ alert("Failed to add settings to XMP") }		//finish off clean		myCover.selection.deselect();		preferences.rulerUnits = originalUnit; // restore original ruler		progressor.done();		app.purge(PurgeTarget.ALLCACHES);	}	//////////////////////////////////////////////////////////////////////////////////////////	////////////// END BUILD /////////////////////////////////////////////////////////////////	//////////////////////////////////////////////////////////////////////////////////////////	//----------------------------------------------------------------------------------------	// DRAW TOOLS	//----------------------------------------------------------------------------------------	function drawLine( startXY, endXY, width ) {		// startXY : two element array of numbers for x,y start of line,		// endXY   : two element array of numbers for x,y endof line,		// width   : line width in pixels		// color   : uses foreground color		/* // SAMPLE USAGE		var startPoint = [118,434];		var endPoint = [335,434];		var lineWidth = 2;		drawLine( startPoint, endPoint, lineWidth );		*/		var desc 		= new ActionDescriptor();		var lineDesc 	= new ActionDescriptor();		var startDesc	= new ActionDescriptor();		var endDesc 	= new ActionDescriptor();		startDesc.putUnitDouble( charIDToTypeID('Hrzn'), charIDToTypeID('#Pxl'), startXY[0] );		startDesc.putUnitDouble( charIDToTypeID('Vrtc'), charIDToTypeID('#Pxl'), startXY[1] );		lineDesc.putObject( 	 charIDToTypeID('Strt'), charIDToTypeID('Pnt '), startDesc );		endDesc.putUnitDouble( 	 charIDToTypeID('Hrzn'), charIDToTypeID('#Pxl'), endXY[0] );		endDesc.putUnitDouble( 	 charIDToTypeID('Vrtc'), charIDToTypeID('#Pxl'), endXY[1] );		lineDesc.putObject( 	 charIDToTypeID('End '), charIDToTypeID('Pnt '), endDesc );		lineDesc.putUnitDouble(  charIDToTypeID('Wdth'), charIDToTypeID('#Pxl'), width );		desc.putObject( 		 charIDToTypeID('Shp '), charIDToTypeID('Ln  '), lineDesc );		desc.putBoolean( 		 charIDToTypeID('AntA'), true );		executeAction( 			 charIDToTypeID('Draw'), desc, DialogModes.NO );	};	//----------------------------------------------------------------------------------------	// ACTIVE LAYER TOOLS	//----------------------------------------------------------------------------------------	function activeLayerDropShadow() {		//The charIDToTypeIDs need four chars( pad with spaces if needed)		var idsetd = charIDToTypeID("setd");		var desc21 = new ActionDescriptor();		var idnull = charIDToTypeID("null");		var ref11  = new ActionReference();		var idPrpr = charIDToTypeID("Prpr");		var idLefx = charIDToTypeID("Lefx");		ref11.putProperty(idPrpr, idLefx);		var idLyr = charIDToTypeID("Lyr ");		var idOrdn = charIDToTypeID("Ordn");		var idTrgt = charIDToTypeID("Trgt");		ref11.putEnumerated(idLyr, idOrdn, idTrgt);		desc21.putReference(idnull, ref11);		var idT = charIDToTypeID("T   ");		var desc22 = new ActionDescriptor();		var idgagl = charIDToTypeID("gagl");		var idAng = charIDToTypeID("#Ang");		desc22.putUnitDouble(idgagl, idAng, 90.000000);		var idScl = charIDToTypeID("Scl ");		var idPrc = charIDToTypeID("#Prc");		desc22.putUnitDouble(idScl, idPrc, 333.333333);		var idDrSh = charIDToTypeID("DrSh");		var desc23 = new ActionDescriptor();		var idenab = charIDToTypeID("enab");		desc23.putBoolean(idenab, true);		var idMd = charIDToTypeID("Md  ");		var idBlnM = charIDToTypeID("BlnM");		var idMltp = charIDToTypeID("Mltp");		desc23.putEnumerated(idMd, idBlnM, idMltp);		var idClr = charIDToTypeID("Clr ");		var desc24 = new ActionDescriptor();		var idRd = charIDToTypeID("Rd  ");		desc24.putDouble(idRd, 0.000000);		var idGrn = charIDToTypeID("Grn ");		desc24.putDouble(idGrn, 0.000000);		var idBl = charIDToTypeID("Bl  ");		desc24.putDouble(idBl, 0.000000);		var idRGBC = charIDToTypeID("RGBC");		desc23.putObject(idClr, idRGBC, desc24);		var idOpct = charIDToTypeID("Opct");		var idPrc = charIDToTypeID("#Prc");		desc23.putUnitDouble(idOpct, idPrc, 21.000000);		var iduglg = charIDToTypeID("uglg");		desc23.putBoolean(iduglg, true);		var idlagl = charIDToTypeID("lagl");		var idAng = charIDToTypeID("#Ang");		desc23.putUnitDouble(idlagl, idAng, 120.000000);		var idDstn = charIDToTypeID("Dstn");		var idPxl = charIDToTypeID("#Pxl");		desc23.putUnitDouble(idDstn, idPxl, 0.000000);		var idCkmt = charIDToTypeID("Ckmt");		var idPxl = charIDToTypeID("#Pxl");		desc23.putUnitDouble(idCkmt, idPxl, 9.000000);		var idblur = charIDToTypeID("blur");		var idPxl = charIDToTypeID("#Pxl");		desc23.putUnitDouble(idblur, idPxl, 250.000000);		var idNose = charIDToTypeID("Nose");		var idPrc = charIDToTypeID("#Prc");		desc23.putUnitDouble(idNose, idPrc, 0.000000);		var idAntA = charIDToTypeID("AntA");		desc23.putBoolean(idAntA, false);		var idTrnS = charIDToTypeID("TrnS");		var desc25 = new ActionDescriptor();		var idNm = charIDToTypeID("Nm  ");		desc25.putString(idNm, "Linear");		var idShpC = charIDToTypeID("ShpC");		desc23.putObject(idTrnS, idShpC, desc25);		var idlayerConceals = stringIDToTypeID("layerConceals");		desc23.putBoolean(idlayerConceals, true);		var idDrSh = charIDToTypeID("DrSh");		desc22.putObject(idDrSh, idDrSh, desc23);		var idLefx = charIDToTypeID("Lefx");		desc21.putObject(idT, idLefx, desc22);		executeAction(idsetd, desc21, DialogModes.NO);	}	function activeLayerMergeDown() {		// merge down		var id972 = charIDToTypeID("Mrg2");		executeAction(id972, undefined, DialogModes.NO);	}	////////////	// expose //	////////////  	return {  		startBuilding : startBuilding	};})();