// NumConversion
// Bruno Herfst 2014

(function() {
	//////////////
	// privates //
	//////////////
	function mm2pt(num) {
		//1 millimetre = 2.83464567 PostScript points
		return num*2.83464567;
	}
	function mm2inch(num) {
		//1 inch = 25.4 millimetres
		return num/25.4;
	}
	function inch2mm(num) {
		//1 inch = 25.4 millimetres
		return num*25.4;
	}
	function inch2pt(num) {
		//1 inch = 72 postscript points
		return num*72;
	}
	function pt2inch(num) {
		//1 inch = 72 postscript points
		return num/72;
	}
	function pt2mm(num) {
		//1 millimetre = 2.83464567 PostScript points
		return num/2.83464567;
	}
    
    function convert(myApp, unitInput, unitOutput, measure, roundDec){
        // validate input
        try{
            var validInput  = myApp.STools.checkMeasureUnit( myApp, unitInput  );
            var validOutput = myApp.STools.checkMeasureUnit( myApp, unitOutput );
        } catch(err){
            alert(err);
        }
        
        if( (typeof validInput == "number") && (typeof validOutput == "number") && (typeof measure == "number") ){
            var convertedMeasure = undefined;
            // Lets convert the items
            switch (validInput) {
                case 0: //from mm
                    switch (validOutput) {
                        case 0: //to mm
                            convertedMeasure = measure;// No need for conversion
                            break;
                        case 1: //to inch
                            convertedMeasure = mm2inch(measure);
                            break;
                        case 2: //to pt
                            convertedMeasure = mm2pt(measure);
                            break;
                        default:
                            alert("number.conversion.convert: Could not convert units from millimeters.");
                            break;
                    }
                    break;
                case 1: //from inch
                    switch (validOutput) {
                        case 0: //to mm
                            convertedMeasure = inch2mm(measure);
                            break;
                        case 1: //to inch
                            convertedMeasure = measure; // No need for conversion
                            break;
                        case 2: //to pt
                            convertedMeasure = inch2pt(measure);
                            break;
                        default:
                            alert("number.conversion.convert: Could not convert units from millimeters.");
                            break;
                    }
                    break;
                case 2: //from pt
                    switch (validOutput) {
                        case 0: //to mm
                            convertedMeasure = pt2mm(measure);
                            break;
                        case 1: //to inch
                            convertedMeasure = pt2inch(measure);
                            break;
                        case 2: //to pt
                            convertedMeasure = measure;// No need for conversion
                            break;
                        default:
                            alert("number.conversion.convert: Could not convert units from millimeters.");
                            break;
                    }
                    break;
                default:
                    alert("number.conversion.convert: Could not convert units.");
                    break;
            }
            // R E T U R N 
            // Round Units
            if(typeof roundDec == "number"){
                roundDec = parseInt(roundDec);
                convertedMeasure = doRound(convertedMeasure, roundDec);
            }
            return convertedMeasure;
        } else {
            // We have not returned elsewhere
           alert("Could not convert " + measure + " from " + unitInput + " to " + unitOutput);
           return measure;
        }
    }
    
	function NaN20(num){
		if(isNaN(num)){
			return 0;
		} else {
			return num;
		}
	}

	function doRound(num, roundDec) {
		var roundMulit = Math.pow(10,roundDec);
		return Math.round(num*roundMulit)/roundMulit;
	}

	////////////
	// expose //
	////////////
	return {
	    convert        : convert,
		mm2pt          : mm2pt,
		mm2inch        : mm2inch,
		inch2mm        : inch2mm,
		inch2pt        : inch2pt,
		pt2inch        : pt2inch,
		pt2mm          : pt2mm,
		NaN20          : NaN20,
		doRound        : doRound
	};
})();
