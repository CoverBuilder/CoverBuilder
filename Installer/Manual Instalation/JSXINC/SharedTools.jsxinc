// SharedTools
// Indesign helpers for CoverBuilder and CoverBuilderPS
// Bruno Herfst 2014

(function() {
    //////////////
    // privates //
    //////////////
    var ButtonTXT = {savePS : "Save Preset", clearPS : "Clear Preset"};
    //-----------------------------------------------------------------------------------
    //  PRESET TOOLS variables
    //-----------------------------------------------------------------------------------
    var MarginObj = {
            CVR14 : {top : 10, outside_right : 10, inside_left : 10, bottom : 10, facing : true,  units : 0, linked : true, ps_guides : false},
            Spine : {top : 10, outside_right : 0,  inside_left : 0,  bottom : 10, facing : false, units : 0, linked : true, ps_guides : false},
            QB    : {top : 10, outside_right : 10, inside_left : 10, bottom : 10, facing : true,  units : 0, linked : true, ps_guides : false},
            Flaps : {top : 10, outside_right : 10, inside_left : 10, bottom : 10, facing : true,  units : 0, linked : true, ps_guides : false}
        };

    var PresetObj = {"presets": [
            {name:"PP-B", width:129, height:198, spine: 0, ppi:300, bleed:5, hinge:0, inExCludeHinge:0, binding:0, inExCludeQB:0, flap:0, fold:0.0, inExCludeFold:0, wrap:0.0, inExCludeWrap:1, margin:MarginObj, measureUnit:0},
            {name:"PP-C", width:153, height:234, spine: 0, ppi:300, bleed:5, hinge:0, inExCludeHinge:0, binding:0, inExCludeQB:0, flap:0, fold:0.0, inExCludeFold:0, wrap:0.0, inExCludeWrap:1, margin:MarginObj, measureUnit:0},
            {name:"-Last Used-", width:0, height:0, spine: 0, ppi:0, bleed:0, hinge:0, inExCludeHinge:0, binding:0, inExCludeQB:0, flap:0, fold:0.0, inExCludeFold:0, wrap:0.0, inExCludeWrap:1, margin:MarginObj, measureUnit:0}
        ]};

    //-----------------------------------------------------------------------------------
    //  C (COVER OBJECT) TOOLS
    //-----------------------------------------------------------------------------------

    function getMeasurementUnits(myApp, C){
        switch(typeof C) {
        	case "object":
        	case "number":
        		// We need to return a string
        		if(C.hasOwnProperty("measureUnit")){
					var munit = C.measureUnit;
				} else if( !isNan(parseInt(C)) ){
					var munit = parseInt(C); // We got a number, let give back the corresponding unit
				}
				switch(munit) {
					case 0:
						return "mm";
						break;
					case 1:
						return "inch";
						break;
					case 2:
						return "pt";
						break;
					default:
						alert("getMeasurementUnits could not find unit from " + munit);
						return undefined;
				}
        		break;
        	case "string":
        		// We need to return a number
        		switch(C.toLowerCase()) {
					case "mm":
						return 0;
						break;
					case "inch":
						return 1;
						break;
					case "pt":
						return 2;
						break;
					default:
						alert("getMeasurementUnits could not find unit from " + C);
						return undefined;
				}
        		break;
        	default:
        		alert("Something went wrong! \n Could not find unit from " + C);
        		return null;
        }
    }

	function resolveSizes(myApp, C){
		// This function takes the C object and resolves all the sizes
		try {
			// RESOLVE WRAP
			if(C.inExCludeWrap == 1){
				C.bleed += C.wrap;
			} else {
				C.bleed -= C.wrap;
			}
			C.wrap = 0;

			// RESOLVE FOLD
			if(C.inExCludeFold == 1){
				C.flap += C.fold;
			} else if(C.inExCludeFold == 2){
				C.width -= C.fold;
			}
			C.fold = 0;

			// RESOLVE HINGE
			if(C.inExCludeHinge == 1){
				C.width += C.hinge;
				if(C.binding > 0){
					C.binding += C.hinge;
				}
			}
			C.hinge = 0;

			// RESOLVE BINDING
			if(C.inExCludeQB == 0){
				C.width += C.binding;
			}
			C.binding = 0;

			return C;
		} catch (e) {
			alert("Could not resolve sizes \n" + e.description);
		}
	}

    function Cparser(myApp, C){
        if( C !== null && typeof C === 'object' ){
            // This function tries to create a valid C object from a C object from an older version.
            // TODO: Make a Margin validator
            var Cool = {
                name:           (String(     C.name)           || "undefined"),
                width:          (parseFloat( C.width)          || 0),
                height:         (parseFloat( C.height)         || 0),
                spine:          (parseFloat( C.spine)          || 0),
                ppi:            (parseInt(   C.ppi)            || 600),
                bleed:          (parseFloat( C.bleed)          || 0),
                hinge:          (parseFloat( C.hinge)          || 0),
                inExCludeHinge: (parseFloat( C.inExCludeHinge) || 0),
                binding:        (parseFloat( C.binding)        || 0),
                inExCludeQB:    (parseInt(   C.inExCludeQB)    || 0),
                flap:           (parseFloat( C.flap)           || 0),
                fold:           (parseFloat( C.fold)           || 0),
                inExCludeFold:  (parseInt(   C.inExCludeFold)  || 0),
                wrap:           (parseFloat( C.wrap)           || 0),
                inExCludeWrap:  (parseInt(   C.inExCludeWrap)  || 0),
                margin:         (C.margin                      || MarginObj),
                measureUnit:    (parseInt(   C.measureUnit)    || 0)
            }
            //alert(myApp.JSON.stringify(C));
            //alert(myApp.JSON.stringify(Cool));
            return Cool;
        }
        return null
    }

	function convertMargins(myApp, thisM, to_unit){

	    // Create reference to number conversion tool
		var nc = myApp.NumCon;
		var err = null;

		for(var key in thisM){
			var k = thisM[key];
			switch (k.units) {
				case 0: //from mm
					switch (to_unit) {
						case 0: //to mm
							break; // No need for conversion
						case 1: //to inch
							k.top 				= nc.doRound(nc.mm2inch(k.top),3);
							k.outside_right		= nc.doRound(nc.mm2inch(k.outside_right),3);
							k.inside_left 		= nc.doRound(nc.mm2inch(k.inside_left),3);
							k.bottom 			= nc.doRound(nc.mm2inch(k.bottom),3);
							k.units 			= 1;
							break;
						case 2: //to pt
							k.top 				= nc.doRound(nc.mm2pt(k.top),3);
							k.outside_right		= nc.doRound(nc.mm2pt(k.outside_right),3);
							k.inside_left 		= nc.doRound(nc.mm2pt(k.inside_left),3);
							k.bottom 			= nc.doRound(nc.mm2pt(k.bottom),3);
							k.units 			= 2;
							break;
						default:
							err = "Could not convert margin units from millimeters.";
							break;
					}
					break;
				case 1: //from inch
					switch (to_unit) {
						case 0: //to mm
							k.top 				= nc.doRound(nc.inch2mm(k.top),3);
							k.outside_right		= nc.doRound(nc.inch2mm(k.outside_right),3);
							k.inside_left 		= nc.doRound(nc.inch2mm(k.inside_left),3);
							k.bottom 			= nc.doRound(nc.inch2mm(k.bottom),3);
							k.units 			= 0;
							break;
						case 1: //to inch
							break; // No need for conversion
						case 2: //to pt
							k.top 				= nc.doRound(nc.inch2pt(k.top),3);
							k.outside_right		= nc.doRound(nc.inch2pt(k.outside_right),3);
							k.inside_left 		= nc.doRound(nc.inch2pt(k.inside_left),3);
							k.bottom 			= nc.doRound(nc.inch2pt(k.bottom),3);
							k.units 			= 2;
							break;
						default:
							err = "Could not convert margin units from millimeters.";
							break;
					}
					break;
				case 2: //from pt
					switch (to_unit) {
						case 0: //to mm
							k.top 				= nc.doRound(nc.pt2mm(k.top),3);
							k.outside_right		= nc.doRound(nc.pt2mm(k.outside_right),3);
							k.inside_left 		= nc.doRound(nc.pt2mm(k.inside_left),3);
							k.bottom 			= nc.doRound(nc.pt2mm(k.bottom),3);
							k.units 			= 0;
							break;
						case 1: //to inch
							k.top 				= nc.doRound(nc.pt2inch(k.top),3);
							k.outside_right		= nc.doRound(nc.pt2inch(k.outside_right),3);
							k.inside_left 		= nc.doRound(nc.pt2inch(k.inside_left),3);
							k.bottom 			= nc.doRound(nc.pt2inch(k.bottom),3);
							k.units 			= 2;
							break;
						case 2: //to pt
							break; // No need for conversion
						default:
							err = "Could not convert margin units from millimeters.";
							break;
					}
					break;
				default: //something went wrong
					err = "Could not convert margin units.";
					break;
			}
		}
		if(err != null){
			alert(err);
		}
		return thisM;
	}

	function convertUnits(myApp, C, to_unit){
		// This function converts all measurement units in the C object
		// We need to write this more elegantly

		// Create reference to number conversion tool
		var nc = myApp.NumCon;

		// Check if we can convert the cover object
		if(!C.hasOwnProperty("measureUnit")){
			alert("Not a valid C object.");
			return C;
		}

		switch (C.measureUnit) {
			case 0: //from mm
				switch (to_unit) {
					case 0: //to mm
						C.margin  = convertMargins(myApp, C.margin, 0);
						break; // No need for conversion
					case 1: //to inch
						C.width   = nc.mm2inch(C.width);
						C.height  = nc.mm2inch(C.height);
						C.spine   = nc.mm2inch(C.spine);
						C.bleed   = nc.mm2inch(C.bleed);
						C.hinge   = nc.mm2inch(C.hinge);
						C.binding = nc.mm2inch(C.binding);
						C.flap    = nc.mm2inch(C.flap);
						C.fold    = nc.mm2inch(C.fold);
						C.wrap    = nc.mm2inch(C.wrap);
						C.margin  = convertMargins(myApp, C.margin, 1);
						C.measureUnit = 1; // Set units to inches
						break;
					case 2: //to pt
						C.width   = nc.mm2pt(C.width);
						C.height  = nc.mm2pt(C.height);
						C.spine   = nc.mm2pt(C.spine);
						C.bleed   = nc.mm2pt(C.bleed);
						C.hinge   = nc.mm2pt(C.hinge);
						C.binding = nc.mm2pt(C.binding);
						C.flap    = nc.mm2pt(C.flap);
						C.fold    = nc.mm2pt(C.fold);
						C.wrap    = nc.mm2pt(C.wrap);
						C.margin  = convertMargins(myApp, C.margin, 2);
						C.measureUnit = 2; // Set units to inches
						break;
					default:
						alert("Could not convert units from millimeters.");
						break;
				}
				break;
			case 1: //from inch
				switch (to_unit) {
					case 0: //to mm
						C.width   = nc.inch2mm(C.width);
						C.height  = nc.inch2mm(C.height);
						C.spine   = nc.inch2mm(C.spine);
						C.bleed   = nc.inch2mm(C.bleed);
						C.hinge   = nc.inch2mm(C.hinge);
						C.binding = nc.inch2mm(C.binding);
						C.flap    = nc.inch2mm(C.flap);
						C.fold    = nc.inch2mm(C.fold);
						C.wrap    = nc.inch2mm(C.wrap);
						C.margin  = convertMargins(myApp, C.margin, 0);
						C.measureUnit = 0; // Set units to inches
						break;
					case 1: //to inch
						C.margin  = convertMargins(myApp, C.margin, 1);
						break; // No need for conversion
					case 2: //to pt
						C.width   = nc.inch2pt(C.width);
						C.height  = nc.inch2pt(C.height);
						C.spine   = nc.inch2pt(C.spine);
						C.bleed   = nc.inch2pt(C.bleed);
						C.hinge   = nc.inch2pt(C.hinge);
						C.binding = nc.inch2pt(C.binding);
						C.flap    = nc.inch2pt(C.flap);
						C.fold    = nc.inch2pt(C.fold);
						C.wrap    = nc.inch2pt(C.wrap);
						C.margin  = convertMargins(myApp, C.margin, 2);
						C.measureUnit = 2; // Set units to inches
						break;
					default:
						alert("Could not convert units from millimeters.");
				}
				break;
			case 2: //from pt
				switch (to_unit) {
					case 0: //to mm
						C.width   = nc.pt2mm(C.width);
						C.height  = nc.pt2mm(C.height);
						C.spine   = nc.pt2mm(C.spine);
						C.bleed   = nc.pt2mm(C.bleed);
						C.hinge   = nc.pt2mm(C.hinge);
						C.binding = nc.pt2mm(C.binding);
						C.flap    = nc.pt2mm(C.flap);
						C.fold    = nc.pt2mm(C.fold);
						C.wrap    = nc.pt2mm(C.wrap);
						C.margin  = convertMargins(myApp, C.margin, 0);
						C.measureUnit = 0; // Set units to inches
						break;
					case 1: //to inch
						C.width   = nc.pt2inch(C.width);
						C.height  = nc.pt2inch(C.height);
						C.spine   = nc.pt2inch(C.spine);
						C.bleed   = nc.pt2inch(C.bleed);
						C.hinge   = nc.pt2inch(C.hinge);
						C.binding = nc.pt2inch(C.binding);
						C.flap    = nc.pt2inch(C.flap);
						C.fold    = nc.pt2inch(C.fold);
						C.wrap    = nc.pt2inch(C.wrap);
						C.margin  = convertMargins(myApp, C.margin, 1);
						C.measureUnit = 1; // Set units to inches
						break;
					case 2: //to pt
						C.margin  = convertMargins(myApp, C.margin, 2);
						break; // No need for conversion
					default:
						alert("Could not convert units from millimeters.");
				}
				break;
			default:
				alert("Could not convert units.");
				break;
		}
		return C;
	}

    //-----------------------------------------------------------------------------------
    //  PRESET TOOLS validator
    //-----------------------------------------------------------------------------------
    function sameProps( induceObj, sampleObj ) {
        if (!Object.keys) {
            Object.keys = (function () {
                'use strict';
                var hasOwnProperty = Object.prototype.hasOwnProperty,
                hasDontEnumBug = !({toString: null}).propertyIsEnumerable('toString'),
                dontEnums = [
                    'toString',
                    'toLocaleString',
                    'valueOf',
                    'hasOwnProperty',
                    'isPrototypeOf',
                    'propertyIsEnumerable',
                    'constructor'
                    ],
                dontEnumsLength = dontEnums.length;

                return function (obj) {
                    if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {
                        throw new TypeError('Object.keys called on non-object');
                    }

                    var result = [], prop, i;

                    for (prop in obj) {
                        if (hasOwnProperty.call(obj, prop)) {
                            result.push(prop);
                        }
                    }

                    if (hasDontEnumBug) {
                        for (i = 0; i < dontEnumsLength; i++) {
                            if (hasOwnProperty.call(obj, dontEnums[i])) {
                                result.push(dontEnums[i]);
                            }
                        }
                    }
                    return result;
                };
            }());
        }

        var induceProps = Object.keys( induceObj ),
            sampleProps = Object.keys( sampleObj );

        if ( induceProps.length == sampleProps.length ) {
            for (key in induceObj) {
                if (sampleObj.hasOwnProperty(key)) {
                    if(induceObj[key].constructor != sampleObj[key].constructor){
                        return false;
                    }
                    switch(induceObj[key].constructor){
                        case Object:
                            if(!sameProps( induceObj[key], sampleObj[key])){
                                return false;
                            }
                            break;
                        case Array:
                            if(!sameKeys( induceObj[key], sampleObj[key])){
                                return false;
                            }
                            break;
                        default:
                            //do nothing
                    }
                } else {
                    return false;
                }
            }
        } else {
            return false;
        }
        // Seems OK
        return true;
    }

    //-----------------------------------------------------------------------------------
    //  PRESET TOOLS get
    //-----------------------------------------------------------------------------------
    function getFile(filePath){
        var f = File(filePath);
        if(!f.exists){
            alert("Can't find file: " + myApp.PathTo.preferences);
        } else {
            return f;
        }
    }
    function getPresets(myApp){
        //read presets file
        var f = File(myApp.PathTo.preferences);

        function resetPresets(){
            return myApp.JSON.ask2Safe(myApp, "Your preferences are corrupt, do you want ro reset to factory settings?", f, PresetObj);
        }

        if(!f.exists){
            // file does not exist: create it!
            myApp.JSON.saveFile(myApp, f, PresetObj);
        }

        try {
            f.open('r');
            var jsontext = f.read();
            f.close();
        } catch(e){
            alert(e.description);
        }

        //if it’s there parse it, otherwise create file
        if (jsontext) {
            try{
                MyPresets = myApp.JSON.parse(jsontext);
            } catch(e) {
                MyPresets = resetPresets();
            }
            // validate presets
            var cp = sameProps(MyPresets, PresetObj);
            if(cp != true){                                         // Presets are not valid or out of date
                MyPresets = updatePresets(myApp, MyPresets, f);     // Let's try and update them!
            }
        } else { //file not valid
            MyPresets = resetPresets();
        }
        return MyPresets;
    }
    function updatePresets(myApp, MyPresets, f){
        if (MyPresets.presets !== undefined){
            // There seems to be presets from an older version
            // Let's try and get safe previous presets
            var newPresetObj = {"presets": []};
            for (i in MyPresets.presets) {
                newPresetObj.presets.push( myApp.STools.Cparser(myApp, MyPresets.presets[i]) );
            }
            if(sameProps(newPresetObj, PresetObj)){
                return newPresetObj;
            }
        }
        return myApp.JSON.ask2Safe(myApp, "Your preferences are corrupt, do you want ro reset to factory settings?", f, PresetObj);
    }

    //-----------------------------------------------------------------------------------
    //  ARRAY TOOLS
    //-----------------------------------------------------------------------------------
    function sameKeys(induceArr, sampleArr){
        // Note: we don't care about array length!
        for (key in induceArr) {
             // we can’t have different types of contructors in arrays
             // but the array may be longer (That what arrays are for!)
            if(induceArr[key].constructor == sampleArr[0].constructor){
                switch(induceArr[key].constructor){
                    case Object:
                        if(!sameProps( induceArr[key], sampleArr[0])){
                            return false;
                        }
                        break;
                    case Array:
                        if(!sameKeys( induceArr[key], sampleArr[0])){
                            return false;
                        }
                        break;
                    default:
                        alert(induceArr[key].constructor);
                        //do nothing
                }
            } else { return false; }
        }
        // Seems OK
        return true;
    }
    function getIndex(thisItem, thisArray){
        for (var i = 0, j = thisArray.length; i < j; i++) {
            if (thisArray[i] === thisItem) { return i; }
        }
        return -1;
    }

    //-----------------------------------------------------------------------------------
    //  LINK JUMPERS
    //-----------------------------------------------------------------------------------
    function emailTo(thisMAIL, thisURL){
        var linkJumper = File(Folder.temp.fullName+"/contact.html");
        linkJumper.open("w");
        var linkBody = '<html><head><script>function load(){window.open("mailto:'+thisMAIL+'")}</script><meta http-equiv="refresh" content="0; url='+thisURL+'"></head><body onload="load()"></body></html>'
        linkJumper.write(linkBody);
        linkJumper.close();
        linkJumper.execute();
    }

    function visitURL(thisURL){
        var linkJumper = File(Folder.temp.fullName+"/contact.html");
        linkJumper.open("w");
        var linkBody = '<html><head><meta http-equiv="refresh" content="0; url='+thisURL+'"></head><body></body></html>'
        linkJumper.write(linkBody);
        linkJumper.close();
        linkJumper.execute();
    }

    function reportBug(){
        visitURL("https://github.com/GitBruno/CoverBuilder/issues");
    }
    function createBarcode(){
        visitURL("http://barcode.brunoherfst.com/");
    }

    ////////////
    // expose //
    ////////////
    // Return an object exposed to the public
    return {
        // Preset Tools
        getFile             : getFile,
        MarginObj           : MarginObj,
        PresetObj           : PresetObj,
        ButtonTXT           : ButtonTXT,
        getPresets          : getPresets,
        // Validator
        sameProps           : sameProps,
        // C Tools
        getMeasurementUnits : getMeasurementUnits,
        resolveSizes        : resolveSizes,
        Cparser             : Cparser,
        convertUnits        : convertUnits,
        // Array Tools
        getIndex            : getIndex,
        sameKeys            : sameKeys,
        // Link Jumpers
        reportBug           : reportBug,
        createBarcode       : createBarcode,
        emailTo             : emailTo,
        visitURL            : visitURL
    };
})();
