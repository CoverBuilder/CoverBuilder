// Shared Tools
// Indesign helpers for CoverBuilder and CoverBuilderPS
// Bruno Herfst 2014
// Version 1.3

(function() {
    //////////////
    // privates //
    //////////////
    $.localize = true; // Make sure ExtendScript localisation engine is enabled.

    var validMeasurementUnits = ["mm", "inch", "pt"]; // In that order! This is how they appear in the dropdowns and this script saves the indexes as a preset
    
    function localisedValidMeasurementUnits(myApp){
        return [String(myApp.Localise.UI['Mm']),String(myApp.Localise.UI['Inch']),String(myApp.Localise.UI['Pt'])];
    }
    
    function getLocalisedUnits(myApp, Cunits){
        // Converts a C unit to a localised units String
        // For example: input 0 = returns: mm
        var localUnits = localisedValidMeasurementUnits(myApp);
        return localUnits[Cunits];
    }
    
    function createFontObject( myFontName ) {
        var fontObj = { fullName: String(myFontName), familyName: "", styleName: "" };
        var splitFont = String(myFontName).split('\t');
        if(splitFont.length == 2) {
            fontObj.familyName = splitFont[0];
            fontObj.styleName  = splitFont[1];
        } else { // CoverBuilder pre 3.0.5 did not save family name
            fontObj.familyName = String(myFontName);
            fontObj.styleName  = "";
        }
        return fontObj;
    }

    function getRegistrationFontFamilyName ( myApp ){
        return createFontObject( myApp.Settings.registration_font ).familyName;
    }

    function getRegistrationFontStyleName ( myApp ) {
        return createFontObject( myApp.Settings.registration_font ).styleName;
    }
    
    function isSysFont( myFontName ) {
        var fObj = createFontObject( String(myFontName) );
        var sysFonts = app.fonts.everyItem();
        for (var i=0; i<sysFonts.name.length; i++) {
            var fName = sysFonts.name[i].substr(0, sysFonts.name[i].indexOf("\t"));
            if(fName == fObj.familyName) {
                return true;
            }
        }
        return false;
    }

    function getAvailableFontStyles( familyName ) {
        //search inside array
        Array.prototype.findIn = function(search){
          var r = Array();
          for (var i=0; i<this.length; i++) {
            var fName = this[i].substr(0, this[i].indexOf("\t"));
            if(fName == search) {
                r.push(this[i].substr(this[i].indexOf("\t") + 1, this[i].length));
            }
          }
          return r;
        };
        var sysFonts = app.fonts.everyItem();
        var availableStyles = sysFonts.name.findIn( familyName );
        return availableStyles;
    }

    //-----------------------------------------------------------------------------------
    //  PRESET TOOLS variables
    //-----------------------------------------------------------------------------------
    var MarginObj = {
            CVR14 : {top : 10, outside_right : 10, inside_left : 10, bottom : 10, facing : true,  units : 0, linked : true, ps_guides : false},
            Spine : {top : 10, outside_right : 0,  inside_left : 0,  bottom : 10, facing : false, units : 0, linked : true, ps_guides : false},
            QB    : {top : 10, outside_right : 10, inside_left : 10, bottom : 10, facing : true,  units : 0, linked : true, ps_guides : false},
            Flaps : {top : 10, outside_right : 10, inside_left : 10, bottom : 10, facing : true,  units : 0, linked : true, ps_guides : false}
        };

    var PresetObj = {"presets": [
            {name:"PP-B", width:129, height:198, spine: 0, ppi:300, bleed:5, hinge:0, inExCludeHinge:0, binding:0, inExCludeQB:0, flap:0, fold:0.0, inExCludeFold:1, wrap:0.0, inExCludeWrap:1, slugs:-1, margin:MarginObj, measureUnit:0, slugPageSize:true, slugTrimSize:true, resolved:false, colorProfile:"undefined", registration_font:"undefined", extraGuides: new Array()},
            {name:"PP-C", width:153, height:234, spine: 0, ppi:300, bleed:5, hinge:0, inExCludeHinge:0, binding:0, inExCludeQB:0, flap:0, fold:0.0, inExCludeFold:1, wrap:0.0, inExCludeWrap:1, slugs:-1, margin:MarginObj, measureUnit:0, slugPageSize:true, slugTrimSize:true, resolved:false, colorProfile:"undefined", registration_font:"undefined", extraGuides: new Array()}
        ]};

    //-----------------------------------------------------------------------------------
    //  C (COVER OBJECT) TOOLS
    //-----------------------------------------------------------------------------------
    function getMeasurementUnits(myApp, C, returnInDesignMeasurementUnits){
        // set to true to always return InDesign MeasurementUnits
        // e.g. MeasurementUnits.MILLIMETERS -> 2053991795
        var inddMU = returnInDesignMeasurementUnits || false;
        switch(typeof C) {
            case "object":
                // We need to return a string
                if(C.hasOwnProperty("measureUnit")){
                    var munit = C.measureUnit;
                    return getMeasurementUnits(myApp, munit, inddMU);
                } else if( !isNaN(parseInt(C)) ){
                    var munit = parseInt(C); // We got a number, let give back the corresponding unit
                    return getMeasurementUnits(myApp, munit, inddMU);
                } else {
                    alert("Could not parse measure unit from object.");
                }
            case "number":
                switch(C) {
                    case 0:
                        if(inddMU){
                            return 2053991795;
                        }
                        return String(myApp.Localise.UI['Mm']);
                        break;
                    case 1:
                        if(inddMU){
                            return 2053729891;
                        }
                        return String(myApp.Localise.UI['Inch']);
                        break;
                    case 2:
                        if(inddMU){
                            return 2054188905;
                        }
                        return String(myApp.Localise.UI['Pt']);
                        break;
                    default:
                        alert("getMeasurementUnits could not find unit for number: " + munit);
                        return undefined;
                }
                break;
            case "string":
                // We need to return a number
                switch(C.toLowerCase()) {
                    case "mm":
                    case "millimeters":
                    case "millimeter":
                    case "zmms":
                        if(inddMU){
                            return 2053991795;
                        }
                        return 0;
                        break;
                    case "inchesDecimal":
                    case "inch":
                    case "inches":
                    case "zoll":
                    case "pouce":
                    case "zind":
                        if(inddMU){
                            return 2053729891;
                        }
                        return 1;
                        break;
                    case "points":
                    case "pt":
                    case "zpoi":
                        if(inddMU){
                            return 2054188905;
                        }
                        return 2;
                        break;
                    default:
                        alert("getMeasurementUnits could not find unit for string: " + C.toLowerCase());
                        return undefined;
                }
                break;
            default:
                alert("Not a valid type! \n  " + typeof C);
                return null;
        }
    }   

    function getStandardSlugSize(myApp, cUnit) {
        // Gets the slug size from app settings
        return myApp.NumCon.convert(myApp, myApp.Settings.Slugs.measure, myApp.Settings.Slugs.unit, cUnit );
    }

    function resolveSizes(myApp, C){
        if(typeof C["resolved"] !== "boolean") {
            alert("Could not resolve sizes.\nThere is no resolved boolean in Cover object.");
            return C;
        }
        if(C.resolved) {
            // C is allready resolved
            return C;
        }

        // This function takes the C object and resolves all it's dimensions
        try {
            // First make sure all measurements are in the same measure unit
            C = myApp.JSON.parse(myApp.JSON.stringify(C)); // Make a copy
            
            // Save UI data
            C.uiBleed   = C.bleed;
            C.uiFlap    = C.flap;
            C.uiWidth   = C.width;
            C.uiBinding = C.binding;
            C.uiMargin  = C.margin;

            // RESOLVE WRAP
            if(C.inExCludeWrap == 0){
                C.bleed -= C.wrap;
            } else if(C.inExCludeWrap == 2) {
                /* Wrap (inclusive bleed) */
                if(C.wrap >= C.bleed){
                    C.bleed = C.wrap;
                }
            } else {
                C.bleed += C.wrap;
            }

            // RESOLVE FOLD
            if(C.inExCludeFold == 1){
                C.flap += C.fold;
            } else if(C.inExCludeFold == 2){
                C.width -= C.fold;
                C.flap  += C.fold
            }
            
            // RESOLVE HINGE
            if(C.inExCludeHinge == 1){
                C.width += C.hinge;
                if(C.binding > 0){
                    C.binding += C.hinge;
                }
            }
            
            // RESOLVE BINDING
            if(C.inExCludeQB == 0){
                C.width -= C.binding;
            }
            
            // RESOLVE MARGINS
            function resolveMargin (myApp, C, margin) {
                margin.top            = myApp.NumCon.convert(myApp, margin.top           , margin.units, C.measureUnit, 8);
                margin.outside_right  = myApp.NumCon.convert(myApp, margin.outside_right , margin.units, C.measureUnit, 8);
                margin.inside_left    = myApp.NumCon.convert(myApp, margin.inside_left   , margin.units, C.measureUnit, 8);
                margin.bottom         = myApp.NumCon.convert(myApp, margin.bottom        , margin.units, C.measureUnit, 8);
                margin.units          = C.measureUnit;
                return margin;
            }

            C.margin.CVR14 = resolveMargin(myApp, C, C.margin.CVR14);
            C.margin.Spine = resolveMargin(myApp, C, C.margin.Spine);
            C.margin.QB    = resolveMargin(myApp, C, C.margin.QB);
            C.margin.Flaps = resolveMargin(myApp, C, C.margin.Flaps);

            C.resolved = true;

            return C;
        } catch (e) {
            alert("Could not resolve sizes.\n" + e.message +  " (Line " + e.line + " in file " + e.fileName + ")");
        }
    }

    function newC (myApp) {
        return myApp.STools.Cparser( myApp, {name: "empty"} );
    }

    function Cparser(myApp, C){
        // ALways returns a C [Cover] object
        if( C !== null && typeof C === 'object' ){
            // This function tries to create a valid C object from a C object from an older version.
            // TODO: Make a Margin validator
            var Cool = {
                name:               (String(     C.name)             || "undefined"),
                version:             myApp.Settings.version,
                width:              (parseFloat( C.width)            || 0),
                height:             (parseFloat( C.height)           || 0),
                spine:              (parseFloat( C.spine)            || 0),
                ppi:                (parseInt(   C.ppi)              || 600),
                bleed:              (parseFloat( C.bleed)            || 0),   
                hinge:              (parseFloat( C.hinge)            || 0),
                inExCludeHinge:     (parseFloat( C.inExCludeHinge)   || 0),
                binding:            (parseFloat( C.binding)          || 0),
                inExCludeQB:        (parseInt(   C.inExCludeQB)      || 0),
                flap:               (parseFloat( C.flap)             || 0),
                fold:               (parseFloat( C.fold)             || 0),
                inExCludeFold:      (parseInt(   C.inExCludeFold)    || 0),
                wrap:               (parseFloat( C.wrap)             || 0),
                inExCludeWrap:      (parseInt(   C.inExCludeWrap)    || 0),
                slugs:              (parseFloat( C.slugs )           || -1),
                margin:             (C.margin                        || MarginObj),
                measureUnit:        (parseInt(   C.measureUnit)      || 0),
                slugPageSize:        Boolean(    (typeof C.slugPageSize == "undefined") || C.slugPageSize),
                slugTrimSize:        Boolean(    (typeof C.slugPageSize == "undefined") || C.slugTrimSize),
                resolved:            Boolean(    C.resolved == true),
                colorProfile:       (String(     C.colorProfile)      || "undefined"),
                registration_font:  (String(     C.registration_font) || "undefined"),
                extraGuides:        (C.extraGuides                    || new Array() )
            }
            //alert(myApp.JSON.stringify(C));
            //alert(myApp.JSON.stringify(Cool));
            return Cool;
        }
        return myApp.STools.newC( myApp );
    }

    function convertMargins(myApp, coverMargins, to_unit){
        var myMargins = ["top","outside_right","inside_left","bottom"];
        for(var page in coverMargins){
            var pagemargins = coverMargins[page];

            var mlen = myMargins.length;
            for (var i = 0; i < mlen; i++) {
                pagemargins[myMargins[i]] = myApp.NumCon.convert(myApp, pagemargins[myMargins[i]], pagemargins.units, to_unit, 3);
            }

            pagemargins.units = checkMeasureUnit(myApp, to_unit);
        }
        return coverMargins;
    }

    function convertUnits(myApp, C, to_unit){
        // Check if we can convert the cover object
        if(!C.hasOwnProperty("measureUnit")){
            alert("Not a valid C object.");
            return C;
        }

        var dimensions = ["width","height","spine","bleed","hinge","binding","flap","fold","wrap","slugs"];
        var dlen = dimensions.length;
        for (var i = 0; i < dlen; i++) {
            C[dimensions[i]] = myApp.NumCon.convert(myApp, C[dimensions[i]], C.measureUnit, to_unit, 5);
        }

        // Don't do margins
        // C.margin      = convertMargins(myApp, C.margin, to_unit);
        C.measureUnit = checkMeasureUnit(myApp, to_unit);

        return C;
    }

    //-----------------------------------------------------------------------------------
    //  PRESET TOOLS validator
    //-----------------------------------------------------------------------------------
    function sameProps( induceObj, sampleObj ) {
        // This function returns an object with an response object:
        function returnRes(OK, MSG){
            return {ok: (OK || false), response: "ID45862516: " + String( MSG || "") };
        }
        
        if(induceObj == null || sampleObj == null){
            return returnRes(false, "Recieved null object.");
        }

        if (!Object.keys) {
            Object.keys = (function () {
                'use strict';
                var hasOwnProperty = Object.prototype.hasOwnProperty,
                hasDontEnumBug = !({toString: null}).propertyIsEnumerable('toString'),
                dontEnums = [
                    'toString',
                    'toLocaleString',
                    'valueOf',
                    'hasOwnProperty',
                    'isPrototypeOf',
                    'propertyIsEnumerable',
                    'constructor'
                    ],
                dontEnumsLength = dontEnums.length;

                return function (obj) {
                    if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {
                        throw new TypeError('Object.keys called on non-object');
                    }

                    var result = [], prop, i;

                    for (prop in obj) {
                        if (hasOwnProperty.call(obj, prop)) {
                            result.push(prop);
                        }
                    }

                    if (hasDontEnumBug) {
                        for (i = 0; i < dontEnumsLength; i++) {
                            if (hasOwnProperty.call(obj, dontEnums[i])) {
                                result.push(dontEnums[i]);
                            }
                        }
                    }
                    return result;
                };
            }());
        }

        if(induceObj.constructor != sampleObj.constructor){
            return returnRes(false, "Not the same contructor: " + induceObj.constructor + " != " + sampleObj.constructor);
        }

        try{
            var induceProps = Object.keys( induceObj );
            var sampleProps = Object.keys( sampleObj );
        } catch(_err){
            return returnRes(false, "Could not get object keys: " + _err);
        }

        try{
            for (key in induceObj) {
                if (sampleObj.hasOwnProperty(key)) {
                    if(induceObj[key].constructor != sampleObj[key].constructor){
                        return returnRes(false, "Property name is of different constructor");
                    }
                    switch(induceObj[key].constructor){
                        case Object:
                            var check = sameProps( induceObj[key], sampleObj[key] );
                            if(!check.ok){
                                return check;
                            }
                            break;
                        case Array:
                            var check = sameKeys( induceObj[key], sampleObj[key] );
                            if(!check.ok){
                                return check;
                            }
                            break;
                        default:
                            break; //do nothing
                    }
                } else {
                    return returnRes(false, "Property is missing in sample object.");
                }
            }
        } catch(_err){
            return returnRes(false, _err);
        }
        // Seems OK
        return returnRes(true, "No problems found.");
    }

    function checkMeasureUnit(myApp, mu){
        // Returns the measurement unit as Number
        // Return error string if there are problems
        var err     = "checkMeasureUnit: \n";
        var validmu = null;

        // Start with checking measure unit
        switch(typeof mu) {
            case "number":
                validmu = Math.abs(parseInt(mu)); // Make sure it is a integer
                if(!(validmu < myApp.STools.validMeasurementUnits.length)){
                    err += "Unit not supported.\n";
                    return err;
                }
                break;
            case "string":
                var validmu = getMeasurementUnits(myApp, mu);
                if(typeof validmu != "number"){
                    err += "Unit not supported.\n";
                    return err;
                }
                break;
            default:
                return err;
                break;
        }
        return validmu
    }

    //-----------------------------------------------------------------------------------
    //  PRESET TOOLS get
    //-----------------------------------------------------------------------------------
    function getFile(filePath){
        var f = File(filePath);
        if(!f.exists){
            alert("Can't find file: " + myApp.PathTo.preferences);
        } else {
            return f;
        }
    }
    function getPresets(myApp){
        // This function will try and load the preset object.
        // And return the standard presets
        // if user presets can not be found or loaded

        var MyPresets = myApp.STools.PresetObj;

        //read presets file
        var f = File(myApp.PathTo.preferences);

        function resetPresets(){
            return myApp.JSON.ask2Safe(myApp, "Your preferences are corrupt, do you want ro reset to factory settings?", f, myApp.STools.PresetObj);
        }

        if(!f.exists){
            // file does not exist: create it!
            myApp.JSON.saveFile(myApp, f, myApp.STools.PresetObj);
        }

        try {
            f.open('r');
            var jsontext = f.read();
            f.close();
        } catch(e){
            alert("CoverBuilder Error:\n" + e.message +  " (Line " + e.line + " in file " + e.fileName + ")");
        }

        //if it’s there parse it, otherwise create file
        if (jsontext) {
            try{
                MyPresets = myApp.JSON.parse(jsontext);
            } catch(e) {
                MyPresets = resetPresets();
            }
            
            var cp = myApp.STools.sameProps(MyPresets, myApp.STools.PresetObj);

            if(cp.ok != true){                                      // Presets are not valid or out of date
                MyPresets = updatePresets(myApp, MyPresets, f);     // Let's try and update them!
            }
        } else { //file not valid
            MyPresets = resetPresets();
        }
        return MyPresets;
    }

    function updatePresets(myApp, MyPresets, f){
        if(typeof(MyPresets) == "object"){
            if(MyPresets.hasOwnProperty("presets")){
                // There seems to be presets from an older version
                // Let's try and get safe previous presets
                var newPresetObj = {"presets": []};
                for ( var i=0; i < MyPresets.presets.length; i++ ) {
                    newPresetObj.presets.push( myApp.STools.Cparser(myApp, MyPresets.presets[i]) );
                }
                var check = sameProps(newPresetObj, myApp.STools.PresetObj);
                if(check.ok){
                    // safe and return newPresetObj
                    return myApp.JSON.saveFile(myApp, f, newPresetObj);
                }
            }
        }
        return myApp.JSON.ask2Safe(myApp, "Your preferences are corrupt, do you want ro reset to factory settings?", f, myApp.STools.PresetObj);
    }

    function getPluginfoIndex(myApp, pluginfo, plugName){
        for ( var i=0; i < pluginfo.length; i++ ) {
            if(pluginfo[i].plugin_name == plugName){
                return i;
            }
        }
        return -1;
    }

    function getPluginSettingsFor(myApp, thisPlugin, Settings) {
        // PAR Settings makes sure I can use this function when pluginfo is not loaded yet.
        if(Settings == undefined){
            var Settings = myApp.Settings;
        }
        
        var plugName  = thisPlugin.plugin_name
        
        var plugIndex = myApp.STools.getPluginfoIndex(myApp, Settings.pluginfo, plugName);
        
        if(plugIndex >= 0){
            return {
                plugin_name    : Settings.pluginfo[plugIndex].plugin_name, 
                launch_on_load : Settings.pluginfo[plugIndex].launch_on_load || false, 
                add_to_menu    : Settings.pluginfo[plugIndex].add_to_menu    || false, 
                activated      : Settings.pluginfo[plugIndex].activated      || false
            };
        } else {
            return {
                plugin_name    : thisPlugin.plugin_name, 
                launch_on_load : thisPlugin.launch_on_load || false,
                add_to_menu    : thisPlugin.add_to_menu    || false, 
                activated      : thisPlugin.activated      || false
            };
        }
    }

    function saveUserSettings(myApp){
        var fSettings = File(myApp.PathTo.settings);
        myApp.JSON.saveFile(myApp, fSettings, myApp.Settings);
    }

    //-----------------------------------------------------------------------------------
    //  ARRAY TOOLS
    //-----------------------------------------------------------------------------------
    function arraysAreIdentical(myApp, arr1, arr2){
        // Check if given arrays are identical
        if ( !(arr1 instanceof Array && arr2 instanceof Array) ) {
            return false;
        }

        // compare lengths - can save a lot of time 
        if ( arr1.length != arr2.length ) {
            return false;
        }

        for (var i = 0, l=arr1.length; i < l; i++) {
            // Check if we have nested arrays
            if (arr1[i] instanceof Array && arr2[i] instanceof Array) {
                // recurse into the nested arrays
                if ( !myApp.STools.arraysAreIdentical(arr1[i], arr2[i]) ){
                    return false;   
                }
            } 
            else if ( arr1[i] != arr2[i] ) { 
                // Warning - two different object instances will never be equal: {x:20} != {x:20}
                return false;
            }
        }
        return true;
    }

    function sameKeys(induceArr, sampleArr){
        // This function returns an object with an response object:
        function returnRes(OK, MSG){
            return {ok: (OK || false), response: "ID56789765: " + String( MSG || "") };
        }

        if(induceArr == undefined || sampleArr == undefined){
            return returnRes(false, "Undefined is not an array.");
        }

        var arrlen = induceArr.length;
        for (var key = 0; key < arrlen; key++) {
            // we can’t have different types of contructors in arrays
            // but the array may be longer (That what arrays are for!)
            if(typeof(induceArr[key]) == typeof(sampleArr[0])){
                switch(typeof(induceArr[key])){
                    case "object":
                        var check = sameProps( induceArr[key], sampleArr[0]);
                        if(!check.ok){
                            return check;
                        }
                        break;
                    case "array":
                        var check = sameKeys( induceArr[key], sampleArr[0]);
                        if(!check.ok){
                            return check;
                        }
                        break;
                    default:
                        //do nothing
                }
            } else {
                return returnRes(false, "Found an unexpected contructor in array.");
            }
        }
        return returnRes(true, "Seems OK. ");
    }

    function getIndex(thisItem, thisArray, returnVal){
        if (typeof returnVal == 'undefined') returnVal = -1;
        returnVal = parseInt(returnVal);
        for (var i = 0, j = thisArray.length; i < j; i++) {
            if (thisArray[i] == thisItem) { return i; }
        }
        return returnVal;
    }

    //-----------------------------------------------------------------------------------
    //  LINK JUMPERS
    //-----------------------------------------------------------------------------------
    /*
    Thanks to Gerald Singelmann and Marc Autret for the visitURL function
    The advantage of this approach is that it works event while InDesign is locked in a modal state...
    https://forums.adobe.com/message/3180866
    */

    function visitURL(/*str*/ url) {
         var isMac = (File.fs == "Macintosh"),
              fName = 'tmp' + (+new Date()) + (isMac ? '.webloc' : '.url'),
              fCode = isMac ?
                   ('<?xml version="1.0" encoding="UTF-8"?>\r'+
                   '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" '+
                   '"http://www.apple.com/DTDs/PropertyList-1.0.dtd">\r'+
                   '<plist version="1.0">\r'+
                   '<dict>\r'+
                        '\t<key>URL</key>\r'+
                        '\t<string>%url%</string>\r'+
                   '</dict>\r'+
                   '</plist>') :
                   '[InternetShortcut]\rURL=%url%\r';

         var f = new File(Folder.temp.absoluteURI + '/' + fName);
         if(! f.open('w') ) return false;

         f.write(fCode.replace('%url%',url));
         f.close();
         f.execute();
         $.sleep(500);     // 500 ms timer
         f.remove();
         return true;
    }
    
    function sendErr(CB, dataString){
    	var app  = "CoverBuilder ";
    	    app += String(CB.Settings.version);
    	var data = String(dataString);
 		visitURL("http://coverbuilder.brunoherfst.com/errorlogger.html?app=" + encodeURI(app) + "&data=" + encodeURI(data));
    }

    function getHelp(){
        visitURL("http://coverbuilder.brunoherfst.com/faq/?from=Plugin");
    }
    function createBarcode(){
        visitURL("http://barcode.brunoherfst.com/?from=Plugin");
    }

    //-----------------------------------------------------------------------------------
    //  OTHER
    //-----------------------------------------------------------------------------------
    function niceErrorAlert(error, header) {
        if (typeof header === 'string' || header instanceof String) {
            header += "\n";
        } else {
            var header = "CoverBuilder Error\n"; 
        }
        alert(header + e.message + " (Line " + e.line + " in file " + e.fileName + ")");
    }

    ////////////
    // expose //
    ////////////
    // Return an object exposed to the public
    return {
        validMeasurementUnits          : validMeasurementUnits,
        localisedValidMeasurementUnits : localisedValidMeasurementUnits,
        getLocalisedUnits              : getLocalisedUnits,
        createFontObject               : createFontObject,
        isSysFont                      : isSysFont,
        getRegistrationFontFamilyName  : getRegistrationFontFamilyName,
        getRegistrationFontStyleName   : getRegistrationFontStyleName,
        getAvailableFontStyles         : getAvailableFontStyles,
        // Preset Tools         
        getFile                        : getFile,
        MarginObj                      : MarginObj,
        PresetObj                      : PresetObj,
        getPresets                     : getPresets,
        saveUserSettings               : saveUserSettings,
        validMeasurementUnits          : validMeasurementUnits,
        getPluginfoIndex               : getPluginfoIndex,
        getPluginSettingsFor           : getPluginSettingsFor,
        // Validator          
        sameProps                      : sameProps,
        checkMeasureUnit               : checkMeasureUnit,
        // C Tools          
        getMeasurementUnits            : getMeasurementUnits,
        getStandardSlugSize            : getStandardSlugSize,
        resolveSizes                   : resolveSizes,
        newC                           : newC,
        Cparser                        : Cparser,
        convertUnits                   : convertUnits,
        // Array Tools
        arraysAreIdentical             : arraysAreIdentical,
        getIndex                       : getIndex,
        sameKeys                       : sameKeys,
        // Link Jumpers          
        getHelp                        : getHelp,
        createBarcode                  : createBarcode,
        visitURL                       : visitURL,
        // Other         
        niceErrorAlert                 : niceErrorAlert
    };
})();
