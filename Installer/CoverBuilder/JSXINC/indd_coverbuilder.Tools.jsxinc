// Tools for InDesign
// Indesign helpers for CoverBuilder
// Bruno Herfst 2014
// Version 1.0.1

(function() {
    //////////////
    // privates //
    //////////////
    
    //-----------------------------------------------------------------------------------
    //  SELECTION TOOLS
    //-----------------------------------------------------------------------------------
    function itemsSelected(myApp, tellUser){
        // This function needs more work which can be done when needed.
        // Always return a Boolean
        var tellUser = tellUser || false;
        var selectionType = "something";
        if(app.selection.length < 1){
            if(tellUser){
                alert("Please select " + selectionType + " before running this function.");
            }
            return false;
        }
        return true;
    }
    
    //-----------------------------------------------------------------------------------
    //  LAYER TOOLS
    //-----------------------------------------------------------------------------------
    function getSelectAndMoveLayer(doc, name, afterlayerNo){
        return moveLayer(getAndSelectLayer(doc, name), afterlayerNo);
    }
    function getAndSelectLayer(doc, name) {
        return selectLayer(doc, getLayer(doc, name));
    }
    function getLayer(doc, name) {
        for (i=0; i<doc.layers.length; i++) {
            if (doc.layers[i].name==name) return doc.layers[i];
        }
        return doc.layers.add({name:name});
    }
    function selectLayer(doc, layer){
        doc.activeLayer = layer;
        return layer;
    }
    function moveLayer(layer, afterlayerNo){
        try {
            layer.move(LocationOptions.AFTER,layer.parent.layers[afterlayerNo]);
            return layer
        } catch (e) {
            alert("CoverBuilder.Tools MoveLayer\n" + e.description);
        }
    }

    //-----------------------------------------------------------------------------------
    //  PAGE TOOLS
    //-----------------------------------------------------------------------------------
    function getActiveCover(myApp, myDoc){
        // Check if we want to return Active Document if it is not a cover
        var returnDoc = myDoc || false;
        if(returnDoc.constructor != Boolean){
            returnDoc =  false;
            //This should never happen but I want to know if it is used wrong
            alert("Dude!\ngetActiveCover -> Expected Boolean" );
        }

        //Make certain that user interaction (display of dialogs, etc.) is turned on.
        app.scriptPreferences.userInteractionLevel = UserInteractionLevels.interactWithAll;

        if (app.documents.length <= 0) {
            alert("Open a document before using this function.");
            exit();
        }

        var myCover = app.activeDocument;
        //check if cover is build with CoverBuilder
        var myOldSpine = myCover.metadataPreferences.getProperty("http://brunoherfst.com/","Settings[3]");
        if(myOldSpine == "") {
            if(!returnDoc){
                var visit = confirm("This document is not build with the latest version of CoverBuilder.\nDo you want to download the latest version now?");
                if(visit){
                    myApp.STools.visitURL("http://coverbuilder.brunoherfst.com/");
                }
                exit();
            }
        }
        return myCover;
    }
    
    function addPageInfo(myApp, myPage){
        myPage.bounds = myPage.page.bounds;
        myPage.w = myPage.bounds[3]-myPage.bounds[1];
        myPage.h = myPage.bounds[2]-myPage.bounds[0];
        return myPage;
    }

    function getMasterPage(myApp, myCover, myName, myPage){
        var mPage    = new Object();
        mPage.name   = myName;
        mPage.spread = myCover.masterSpreads.item(mPage.name);
        mPage.page   = mPage.spread.pages[myPage];

        if(!mPage.page.isValid){
            alert("Can’t find the requested page!\nWhat happend to master spread "+mPage.name+"?");
            exit(); // I’m done here
        }

        mPage = myApp.Tools.addPageInfo(myApp, mPage);
        return mPage;
    }
    
    function getCVR1pageNo(myApp){
        var myCover = myApp.Tools.getActiveCover(myApp);
        var C = myApp.XMP.retrieveCoverObject(myApp, myCover);
        if(C.flap > 0){
            return 4;
        } else if (C.binding > 0){
            return 5;
        } else {
            return 3;
        }
    }
    
    function getPageBleedBounds(myApp, myCover, myPage, selector){   
        var myCoverBleed = {
                Top    : myCover.documentPreferences.documentBleedTopOffset,
                Bottom : myCover.documentPreferences.documentBleedBottomOffset,
                Left   : myCover.documentPreferences.documentBleedInsideOrLeftOffset,
                Right  : myCover.documentPreferences.documentBleedOutsideOrRightOffset
            };

        var myBleedBounds = myPage.bounds; //[y1, x1, y2, x2]

        // Add top and bottom bleed
        myBleedBounds[0] -= myCoverBleed.Top;
        myBleedBounds[2] += myCoverBleed.Bottom;

        // Left and right bleed
        switch (selector){
            case 2:
                return myBleedBounds; // Return page-bounds with top+bottom bleed
                break;
            case 3:
                myBleedBounds[1] -= myCoverBleed.Left;
                return myBleedBounds;
                break;
            case 1:
                myBleedBounds[3] += myCoverBleed.Right;
                return myBleedBounds;
                break;
            default: // Return page-bounds without bleed
                return myPage.bounds;
                break;
        }
    }
    
    function getItemByLabel(myPageOrSpread, myLabel, returnAll){
        //returns array of all items that have label unless returnAll is set to true, then it return the first item;
        //if nothing is found this function returns null
        returnAll = returnAll || false;
        var allItems = new Array();
        if(myPageOrSpread.isValid){        
            var myElements = myPageOrSpread.allPageItems;
            var len = myElements.length;
            for (var i = len-1; i >= 0; i--){
                if(myElements[i].label == myLabel){
                    if(returnAll){
                        allItems.push(myElements[i]); 
                    } else {
                        return myElements[i];
                    }
                }
            }
        } else {
            alert("CoverBuilder.Tools: Expected a valid spread.");
        }
        if(allItems.length > 0){
            return allItems;
        } else { return null; }
    }
    //-----------------------------------------------------------------------------------
    // APPLICATION SETTINGS TOOLS
    //-----------------------------------------------------------------------------------
    function setRuler(myCover, myNewUnits){
        var myOldUnits = {xruler : myCover.viewPreferences.horizontalMeasurementUnits, yruler: myCover.viewPreferences.verticalMeasurementUnits}
        
        if(myNewUnits.hasOwnProperty('xruler') && myNewUnits.hasOwnProperty('yruler')){
            // reset original rulers
            myCover.viewPreferences.horizontalMeasurementUnits = myNewUnits.xruler;
            myCover.viewPreferences.verticalMeasurementUnits   = myNewUnits.yruler;
            return myOldUnits;
        }
        
        with(myCover.viewPreferences){
            switch(myNewUnits) {
                case 0:
                    horizontalMeasurementUnits = MeasurementUnits.MILLIMETERS;
                    verticalMeasurementUnits   = MeasurementUnits.MILLIMETERS;
                    break;
                case 1:
                    horizontalMeasurementUnits = MeasurementUnits.INCHES_DECIMAL;
                    verticalMeasurementUnits   = MeasurementUnits.INCHES_DECIMAL;
                    break;
                case 2:
                    horizontalMeasurementUnits = MeasurementUnits.POINTS;
                    verticalMeasurementUnits   = MeasurementUnits.POINTS;
                    break;
                default:
                    alert("indd_coverbuilder.Build.cover: Could not parse MeasurementUnits from C.measureUnit");
                    break;
            }
            rulerOrigin = RulerOrigin.pageOrigin;
        }
        return myOldUnits;
    }

    //-----------------------------------------------------------------------------------
    //  COLOUR TOOLS
    //-----------------------------------------------------------------------------------
    //This awesome function found here: http://tomaxxi.com/2010/09/quicktip-add-custom-cmykrgbhex-colors-to-document/
    //Example: myColorAdd(myDoc, "My New Colour", ColorModel.PROCESS, [16,0,0,55]);
    function addColor(myDocument, myColorName, myColorModel, myColorValue, forceColor) {
        if (myColorValue instanceof Array == false) {
            myColorValue = [(parseInt(myColorValue, 16) >> 16) & 0xff, (parseInt(myColorValue, 16) >> 8) & 0xff, parseInt(myColorValue, 16) & 0xff];
            myColorSpace = ColorSpace.RGB;
        } else {
            if (myColorValue.length == 3)
                myColorSpace = ColorSpace.RGB;
            else
                myColorSpace = ColorSpace.CMYK;
        }
        try {
            myColor = myDocument.colors.item(myColorName);
            myName = myColor.name;
        } catch (myError) {
            myColor = myDocument.colors.add();
            forceColor = true;
        }
        if(forceColor){
            myColor.properties = {
                name: myColorName,
                model: myColorModel,
                space: myColorSpace,
                colorValue: myColorValue
            };
        }
        return myColor;
    }
    ////////////
    // expose //
    ////////////
    // Return an object exposed to the public
    return {
        // application settings Tools
        setRuler              : setRuler,
        // SelectionTools
        itemsSelected         : itemsSelected,
        // LayerTools
        moveLayer             : moveLayer,
        selectLayer           : selectLayer,
        getLayer              : getLayer,
        getAndSelectLayer     : getAndSelectLayer,
        getSelectAndMoveLayer : getSelectAndMoveLayer,
        // PageTools
        addPageInfo           : addPageInfo,
        getActiveCover        : getActiveCover,
        getMasterPage         : getMasterPage,
        getCVR1pageNo         : getCVR1pageNo,
        getPageBleedBounds    : getPageBleedBounds,
        getItemByLabel        : getItemByLabel,
        // ColourTools
        addColor              : addColor
    };
})();
