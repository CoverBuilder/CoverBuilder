// Tools for InDesign
// Indesign helpers for CoverBuilder
// Bruno Herfst 2014
// Version 1.2

(function() {
    //////////////
    // privates //
    //////////////

    //-----------------------------------------------------------------------------------
    // APPLICATION TOOLS
    //-----------------------------------------------------------------------------------
    function setRuler(myApp, myCover, myNewUnits){
        var myOldUnits = {xruler : myCover.viewPreferences.horizontalMeasurementUnits, yruler: myCover.viewPreferences.verticalMeasurementUnits}

        if(myNewUnits.hasOwnProperty('xruler') && myNewUnits.hasOwnProperty('yruler')){
            // reset original rulers
            myCover.viewPreferences.horizontalMeasurementUnits = myNewUnits.xruler;
            myCover.viewPreferences.verticalMeasurementUnits   = myNewUnits.yruler;
            return myOldUnits;
        }

        with(myCover.viewPreferences){
            switch(myNewUnits) {
                case 0:
                    horizontalMeasurementUnits = MeasurementUnits.MILLIMETERS;
                    verticalMeasurementUnits   = MeasurementUnits.MILLIMETERS;
                    break;
                case 1:
                    horizontalMeasurementUnits = MeasurementUnits.INCHES_DECIMAL;
                    verticalMeasurementUnits   = MeasurementUnits.INCHES_DECIMAL;
                    break;
                case 2:
                    horizontalMeasurementUnits = MeasurementUnits.POINTS;
                    verticalMeasurementUnits   = MeasurementUnits.POINTS;
                    break;
                default:
                    alert("indd_coverbuilder.Tools.setRuler:\nCould not parse MeasurementUnits: " + typeof(myNewUnits) + " " + myNewUnits );
                    break;
            }
            rulerOrigin = RulerOrigin.pageOrigin;
        }
        return myOldUnits;
    }

    //-----------------------------------------------------------------------------------
    // DOCUMENT TOOLS
    //-----------------------------------------------------------------------------------
    function isBuildWithCoverBuilder(myApp, myDoc){
        var mySpine = myDoc.metadataPreferences.getProperty("http://brunoherfst.com/","Settings[3]");
        if(mySpine == "") {
            return false;
        } else {
            return true;
        }
    }

    function guessMarginObj(myApp, myDoc, cUnit){
        // Clone standard margin Object
        try{
            var MarginObj = myApp.JSON.parse(myApp.JSON.stringify(myApp.STools.MarginObj));
        } catch (err) {
            alert(err);
        }
        // !! This function expects the document rulers to be set in the right measure units
        for(var page in MarginObj){
            MarginObj[page].top           = myApp.NumCon.doRound( myDoc.pages.item(0).marginPreferences.top    , 3);
            MarginObj[page].outside_right = myApp.NumCon.doRound( myDoc.pages.item(0).marginPreferences.right  , 3);
            MarginObj[page].inside_left   = myApp.NumCon.doRound( myDoc.pages.item(0).marginPreferences.left   , 3);
            MarginObj[page].bottom        = myApp.NumCon.doRound( myDoc.pages.item(0).marginPreferences.bottom , 3);
            MarginObj[page].units         = parseInt(cUnit);
        }
        return MarginObj;
    }

    function guessC(myApp, myDoc){
        // This function expects a valid document for param myDoc
        // It will return a valid C object or null
        // The function will try and construct a C object from a document not build with CoverBuilder
        var C = null;

        if(isBuildWithCoverBuilder(myApp, myDoc)){
            // myDoc is build with CoverBuilder: Let's retrieve the Cover object
            C = myApp.XMP.retrieveCoverObject(myApp, myDoc);
            if( C != null ){
                return C;
            }
        }

        // myDoc is not build with CoverBuilder
        // ------------------------------------
        // Check if one of the rulers is in a valid measure unit
        // Then set them both the same and safe the measuereunit
        var cUnit = myApp.NumCon.cUnit(myApp, myDoc.viewPreferences.horizontalMeasurementUnits) || myApp.NumCon.cUnit(myApp, myDoc.viewPreferences.verticalMeasurementUnits);
        if( cUnit == null ){
            cUnit = 0;
        }

        // Safe current document rulers and set both rulers to a valid measure
        var oldRulers = setRuler(myApp, myDoc, cUnit);

        var docPrefs = myDoc.documentPreferences;

        var NewC = { name              : "PP-B",
                     width             : myApp.NumCon.doRound( docPrefs.pageWidth  ,3),
                     height            : myApp.NumCon.doRound( docPrefs.pageHeight ,3),
                     spine             : 0,
                     ppi               : myApp.Settings.standardPPI,
                     bleed             : myApp.NumCon.doRound( docPrefs.documentBleedTopOffset ,3),
                     hinge             : 0,
                     inExCludeHinge    : 0,
                     binding           : 0,
                     inExCludeQB       : 0,
                     flap              : 0,
                     fold              : 0,
                     inExCludeFold     : 0,
                     wrap              : 0,
                     inExCludeWrap     : 0,
                     margin            : guessMarginObj(myApp, myDoc, cUnit),
                     measureUnit       : cUnit }; //!! set to the right measure unit

        //Now we have a cover object let's check if the document might be a cover
        if(!docPrefs.facingPages){
            var firstPage = myDoc.pages.item(0);
            if( firstPage.marginPreferences.columnCount == 2 ){
                var assumeSpine = firstPage.marginPreferences.columnGutter;
                var assumeWidth = (NewC.width-assumeSpine)/2;
                NewC.width = assumeWidth;
                NewC.spine = assumeSpine;
            }
        }

        C = myApp.STools.Cparser(myApp, NewC);

        // Reset original rulers
        setRuler(myApp, myDoc, oldRulers);

        return C;
    }

    //-----------------------------------------------------------------------------------
    //  PAGE TOOLS
    //-----------------------------------------------------------------------------------

    function getActiveCover(myApp, returnDoc){
        // Check if we want to return Active Document if it is not a cover
        var returnDoc = returnDoc || false;
        if(returnDoc.constructor != Boolean){
            returnDoc =  false;
            //This should never happen but I want to know if it is used wrong
            alert("Dude!\ngetActiveCover -> Expected Boolean" );
        }

        //Make certain that user interaction (display of dialogs, etc.) is turned on.
        app.scriptPreferences.userInteractionLevel = UserInteractionLevels.interactWithAll;

        if (app.documents.length <= 0) {
            alert(String(myApp.Localise.UIalert['Open_document_before_using_function']));
            exit();
        }

        var myCover = app.activeDocument;

        if(returnDoc || isBuildWithCoverBuilder(myApp, myCover)){
            return myCover;
        } else {
            alert(String(myApp.Localise.UIalert['doc_not_build_with_coverBuilder']));
            exit();
        }
    }

    function addPageInfo(myApp, myPage){
        myPage.bounds = myPage.page.bounds;
        myPage.w = myPage.bounds[3]-myPage.bounds[1];
        myPage.h = myPage.bounds[2]-myPage.bounds[0];
        return myPage;
    }

    function getMasterPage(myApp, myCover, myName, myPage){
        var mPage    = new Object();
        mPage.name   = myName;
        mPage.spread = myCover.masterSpreads.item(mPage.name);
        mPage.page   = mPage.spread.pages[myPage];

        if(!mPage.page.isValid){
            alert("Can’t find the requested page!\nWhat happend to master spread " + mPage.name+"?");
            exit(); // I’m done here
        }

        mPage = myApp.Tools.addPageInfo(myApp, mPage);
        return mPage;
    }

    function getCVR1pageNo(myApp){
        var myCover = myApp.Tools.getActiveCover(myApp);
        var C = myApp.XMP.retrieveCoverObject(myApp, myCover);
        if(C.flap > 0){
            return 4;
        } else if (C.binding > 0){
            return 5;
        } else {
            return 3;
        }
    }

    function getPageBleedBounds(myApp, myCover, myPage, selector){
        var myCoverBleed = {
                Top    : myCover.documentPreferences.documentBleedTopOffset,
                Bottom : myCover.documentPreferences.documentBleedBottomOffset,
                Left   : myCover.documentPreferences.documentBleedInsideOrLeftOffset,
                Right  : myCover.documentPreferences.documentBleedOutsideOrRightOffset
            };

        var myBleedBounds = myPage.bounds; //[y1, x1, y2, x2]

        // Add top and bottom bleed
        myBleedBounds[0] -= myCoverBleed.Top;
        myBleedBounds[2] += myCoverBleed.Bottom;

        // Left and right bleed
        switch (selector){
            case 2:
                return myBleedBounds; // Return page-bounds with top+bottom bleed
                break;
            case 3:
                myBleedBounds[1] -= myCoverBleed.Left;
                return myBleedBounds;
                break;
            case 1:
                myBleedBounds[3] += myCoverBleed.Right;
                return myBleedBounds;
                break;
            default: // Return page-bounds without bleed
                return myPage.bounds;
                break;
        }
    }

    function getItemByLabel(myPageOrSpread, myLabel, returnAll){
        //returns array of all items that have label unless returnAll is set to true, then it return the first item;
        //if nothing is found this function returns null
        returnAll = returnAll || false;
        var allItems = new Array();
        if(myPageOrSpread.isValid){
            var myElements = myPageOrSpread.allPageItems;
            var len = myElements.length;
            for (var i = len-1; i >= 0; i--){
                if(myElements[i].label == myLabel){
                    if(returnAll){
                        allItems.push(myElements[i]);
                    } else {
                        return myElements[i];
                    }
                }
            }
        } else {
            alert("CoverBuilder.Tools: Expected a valid spread.");
        }
        if(allItems.length > 0){
            return allItems;
        } else { return null; }
    }

    //-----------------------------------------------------------------------------------
    //  LAYER TOOLS
    //-----------------------------------------------------------------------------------
    function getSelectAndMoveLayer(doc, name, afterlayerNo){
        return moveLayer(getAndSelectLayer(doc, name), afterlayerNo);
    }
    function getAndSelectLayer(doc, name) {
        return selectLayer(doc, getLayer(doc, name));
    }
    function getLayer(doc, name) {
        for (i=0; i<doc.layers.length; i++) {
            if (doc.layers[i].name==name) return doc.layers[i];
        }
        return doc.layers.add({name:name});
    }
    function selectLayer(doc, layer){
        doc.activeLayer = layer;
        return layer;
    }
    function moveLayer(layer, afterlayerNo){
        try {
            layer.move(LocationOptions.AFTER,layer.parent.layers[afterlayerNo]);
            return layer
        } catch (e) {
            alert("CoverBuilder.Tools MoveLayer\n" + e.description);
        }
    }

    //-----------------------------------------------------------------------------------
    //  SELECTION TOOLS
    //-----------------------------------------------------------------------------------
    function itemsSelected(myApp, tellUser){
        // This function needs more work which can be done when needed.
        // Always return a Boolean
        var tellUser = tellUser || false;
        var selectionType = "something";
        if(app.selection.length < 1){
            if(tellUser){
                alert("Please select " + selectionType + " before running this function.");
            }
            return false;
        }
        return true;
    }

    //-----------------------------------------------------------------------------------
    //  COLOUR TOOLS
    //-----------------------------------------------------------------------------------
    //This awesome function found here: http://tomaxxi.com/2010/09/quicktip-add-custom-cmykrgbhex-colors-to-document/
    //Example: myColorAdd(myDoc, "My New Colour", ColorModel.PROCESS, [16,0,0,55]);
    function addColor(myDocument, myColorName, myColorModel, myColorValue, forceColor) {
        if (myColorValue instanceof Array == false) {
            myColorValue = [(parseInt(myColorValue, 16) >> 16) & 0xff, (parseInt(myColorValue, 16) >> 8) & 0xff, parseInt(myColorValue, 16) & 0xff];
            myColorSpace = ColorSpace.RGB;
        } else {
            if (myColorValue.length == 3)
                myColorSpace = ColorSpace.RGB;
            else
                myColorSpace = ColorSpace.CMYK;
        }
        try {
            myColor = myDocument.colors.item(myColorName);
            myName = myColor.name;
        } catch (myError) {
            myColor = myDocument.colors.add();
            forceColor = true;
        }
        if(forceColor){
            myColor.properties = {
                name: myColorName,
                model: myColorModel,
                space: myColorSpace,
                colorValue: myColorValue
            };
        }
        return myColor;
    }

    ////////////
    // expose //
    ////////////
    // Return an object exposed to the public
    return {
        // APPLICATION TOOLS
        setRuler                : setRuler,
        isBuildWithCoverBuilder : isBuildWithCoverBuilder,
        // DOCUMENT TOOLS
        guessC                  : guessC,
        // PAGE TOOLS
        addPageInfo             : addPageInfo,
        getActiveCover          : getActiveCover,
        getMasterPage           : getMasterPage,
        getCVR1pageNo           : getCVR1pageNo,
        getPageBleedBounds      : getPageBleedBounds,
        getItemByLabel          : getItemByLabel,
        // LAYER TOOLS
        moveLayer               : moveLayer,
        selectLayer             : selectLayer,
        getLayer                : getLayer,
        getAndSelectLayer       : getAndSelectLayer,
        getSelectAndMoveLayer   : getSelectAndMoveLayer,
        // SELECTION TOOLS
        itemsSelected           : itemsSelected,
        // COLOUR TOOLS
        addColor                : addColor
    };
})();
