// CoverBuilder UI
// Bruno Herfst 2014-2015
// Version 2.1

(function() {
    //////////////
    // privates //
    //////////////
    function CoverOrder(myApp, CoverObject){
        // The Cover Object this function will return
        var C = null;

        var presetChange = true;
        var savePS    = String(myApp.Localise.UI['SavePreset']);
        var clearPS   = String(myApp.Localise.UI['ClearPreset']);
        var lastUsed  = String(myApp.Localise.UI['LastUsed']);

        var MarginObj = myApp.STools.MarginObj;
        var MyPresets = myApp.STools.getPresets(myApp);

        var LoadCoverObject = false;
        var CoverObject = CoverObject || null;
        if(CoverObject != null){
            // Try and load settings!
            LoadCoverObject = true;
            var Cool = myApp.STools.Cparser(myApp, CoverObject);
        }

        var f = myApp.STools.getFile(myApp.PathTo.preferences);

        //////////////
        //  window  //
        //////////////
        var myWindow = new Window ("dialog", "CoverBuilder " + myApp.Settings.version);
            myWindow.orientation = "column";
            myWindow.justify = "left";
            myWindow.alignment = "left";
            myWindow.margins = [10,10,10,12];
            myWindow.spacing = 0;

        var inbetween = 10; // This is what indesign puts in between new elements, not a custom value!

        var unitWidthLong = parseInt({ en: 70, de: 70, nl: 70, fr: 80 });
        var unitWidthShort = 70; // Fit 6 numbers and separator: 000.000

        var unitWidthCombo = unitWidthShort + unitWidthLong + inbetween;
        var unitWidthLongShortLong = (unitWidthLong*2) + unitWidthShort + (inbetween*2);
        var unitHeight = 25;

        var extraSpace = 10;

        ///////////////////////////////////////////////////////////////////////////// START WINDOW
        var globalGroup = myWindow.add ("group");
            globalGroup.orientation = "row";
            globalGroup.alignment   = "left";
            globalGroup.margins = [20,10,20,10];
            var presets = globalGroup.add ("dropdownlist", [0,0,(unitWidthCombo*2)+inbetween,unitHeight], [String(myApp.Localise.UI['Presets']).toUpperCase()]);
            for (var i=0,len=MyPresets.presets.length;i<len;i++) {
                presets.add('item', formatPresetName(MyPresets.presets[i]) );
            };

            presets.selection = 0;

            var whiteSpace = globalGroup.add ("statictext", [0,0,(unitWidthLong*2)+unitWidthShort+(inbetween*2),unitHeight], "");

            var mminch = globalGroup.add ("dropdownlist", [0,0,unitWidthShort,unitHeight], [String(myApp.Localise.UI['Mm']),String(myApp.Localise.UI['Inch'])]);
            mminch.selection = 0;

        /////////////////////////////////////////////////////////////////////////////
        var minimalGroup = myWindow.add ("group");
            minimalGroup.margins = [0,extraSpace,0,10+extraSpace];
            var myHeightLabel = minimalGroup.add ("statictext", [0,0,unitWidthLong,unitHeight], String(myApp.Localise.UI['Height'])+":");
                myHeightLabel.justify = "right";

            var myHeight = minimalGroup.add ("edittext", [0,0,unitWidthShort,unitHeight], "0");

            var myWidthLabel = minimalGroup.add ("statictext", [0,0,unitWidthLong,unitHeight], String(myApp.Localise.UI['Width'])+":");
                myWidthLabel.justify = "right";

            var myWidth = minimalGroup.add ("edittext", [0,0,unitWidthShort,unitHeight], "0");

            var mySpineLabel = minimalGroup.add ("statictext", [0,0,unitWidthLong,unitHeight], String(myApp.Localise.UI['Spine'])+":");
                mySpineLabel.justify = "right";

            var mySpine = minimalGroup.add ("edittext", [0,0,unitWidthShort,unitHeight], "0");

            var myBleedLabel = minimalGroup.add ("statictext", [0,0,unitWidthLong,unitHeight], String(myApp.Localise.UI['Bleed'])+":");
                myBleedLabel.justify = "right";

            var myBleed = minimalGroup.add ("edittext", [0,0,unitWidthShort,unitHeight], "0");

        /////////////////////////////////////////////////////////////////////////////
        var optionalGroup = myWindow.add ("group");
            var optionalInputpanel = optionalGroup.add ("panel");
                optionalInputpanel.margins = [10+extraSpace,10+extraSpace,10+extraSpace,5+extraSpace];
                optionalInputpanel.orientation =  "column";
                optionalInputpanel.alignChildren = "left";

                var optional2Group = optionalInputpanel.add ("group");
                    optional2Group.orientation =  "row";

                    var hingeOrScoreString = String(myApp.Localise.UI['Hinge']) + "/" + String(myApp.Localise.UI['Score']) + ":";
                    var hingeDropdown = optional2Group.add ("dropdownlist", [0,0,unitWidthLongShortLong,unitHeight], ["- "+hingeOrScoreString,"+ "+hingeOrScoreString]);
                    hingeDropdown.selection = 1;
                    var myHinge = optional2Group.add ("edittext", [0,0,unitWidthShort,unitHeight], "0");

                    var wrapDropdown = optional2Group.add ("dropdownlist", [0,0,unitWidthLongShortLong,unitHeight], ["- " + String(myApp.Localise.UI['Wrap']) + ":",
                                                                                                                     "+ " + String(myApp.Localise.UI['Wrap']) + ":"]);
                    wrapDropdown.selection = 1;
                    var myWrap = optional2Group.add ("edittext", [0,0,unitWidthShort,unitHeight], "0");

                var optional1Group = optionalInputpanel.add ("group");
                    optional1Group.orientation =  "row";

                    var flapQBDropdown = optional1Group.add ("dropdownlist", [0,0,unitWidthLongShortLong,unitHeight], [String(myApp.Localise.UI['Flaps'])+":",
                                                                                                                       "- " + String(myApp.Localise.UI['Binding']) + ":",
                                                                                                                       "+ " + String(myApp.Localise.UI['Binding']) + ":"]);
                    flapQBDropdown.selection = 0;
                    var myFlapQB = optional1Group.add ("edittext", [0,0,unitWidthShort,unitHeight], "0");

                    var foldDropdown = optional1Group.add ("dropdownlist", [0,0,unitWidthLongShortLong,unitHeight], ["- " + String(myApp.Localise.UI['Fold']) + ": (" + String(myApp.Localise.UI['Flaps']) + ")",
                                                                                                                     "+ " + String(myApp.Localise.UI['Fold']) + ":",
                                                                                                                     "- " + String(myApp.Localise.UI['Fold']) + ": (" + String(myApp.Localise.UI['Width']) + ")"]);
                    foldDropdown.selection = 0;
                    foldDropdown.visible = false;

                    var myFold = optional1Group.add ("edittext", [0,0,unitWidthShort,unitHeight], "0");
                    myFold.visible = false;

                var optional3Group = optionalInputpanel.add ("group");
                    optional3Group.orientation =  "row";

                //margin button
                var marginButAuto   = String(myApp.Localise.UI['Margin']) + ": " + String(myApp.Localise.UI['Auto']),
                    marginButPreset = String(myApp.Localise.UI['Margin']) + ": " + String(myApp.Localise.UI['Preset']),
                    marginButCustom = String(myApp.Localise.UI['Margin']) + ": " + String(myApp.Localise.UI['Custom']);

                var marginBut = optional3Group.add ("button", [0,0,unitWidthCombo,unitHeight], String(myApp.Localise.UI['SetMargin']) );
                    var marginText = optional3Group.add ("statictext", undefined, String(myApp.Localise.UI['GettingData']) );

                    function updateMarginText(){
                        marginText.text = String(myApp.Localise.UI['Top'])+": "+MarginObj.CVR14.top+", "+String(myApp.Localise.UI['Outside'])+": "+MarginObj.CVR14.outside_right+", "+String(myApp.Localise.UI['Bottom'])+": "+MarginObj.CVR14.bottom+", "+String(myApp.Localise.UI['Inside'])+": "+MarginObj.CVR14.inside_left+" ("+String(myApp.Localise.UI['Cover'])+" 1-4)";
                    }
                    updateMarginText();

                    try{
                        marginText.graphics.font = ScriptUI.newFont ("Verdana", "Regular", 10);
                    } catch(_){
                        //do nothing
                    }

                    marginText.graphics.foregroundColor = marginText.graphics.newPen (myWindow.graphics.PenType.SOLID_COLOR, [0.5, 0.5, 0.5], 0,5);

                    marginBut.onClick = function () {
                        try{
                            var updatedMarginObj = showMarginWindow(myApp, getCoverObjectFromUI(myApp, "CURRENT_UI"));
                            if(myApp.JSON.stringify(updatedMarginObj) != myApp.JSON.stringify(MarginObj)){
                                // Something has changed
                                MarginObj = updatedMarginObj;
                                marginBut.text = marginButCustom;
                                updateMarginText();
                                if(presetChange == false){
                                    presetBut.text = savePS;
                                }
                            }
                        } catch(e){
                            alert(e);
                        }
                    }

                var optional4Group = optionalInputpanel.add ("group");
                    optional4Group.orientation =  "row";

        /////////////////////////////////////////////////////////////////////////////
        var myButtonGroup = myWindow.add ("group");
            myButtonGroup.margins = [20,20+extraSpace,20,10+extraSpace];
            myButtonGroup.alignment = "right";

            //register button
            var helpBut = myButtonGroup.add ("button", undefined, String(myApp.Localise.UI['Help']) );
                helpBut.onClick = function () {
                    myApp.STools.getHelp();
                }

            //save load preset button
            var presetBut = myButtonGroup.add ("button", undefined, savePS );
            //OK CANCEL buttons
            var cancelBut = myButtonGroup.add ("button", undefined, String(myApp.Localise.UI['Cancel']), {name:"cancel"} );
            var buildBut = myButtonGroup.add ("button", undefined, String(myApp.Localise.UI['Ok']), {name:"ok"} );

        ///////////////////////////////////////////////////////////////////////////// END WINDOW

        ////////////// dialog functionality
        buildBut.onClick = function () {
            // Check input
            try{
                // Check if quarter binding makes sense
                //------
                if(flapQBDropdown.selection != 0){
                    var thisQB = parseFloat(myFlapQB.text);
                    if(thisQB < parseFloat(myHinge.text) && thisQB != 0){
                        alert(String(myApp.Localise.UIalert['Binding_should_cover_Hinge_or_Score']));
                        return null;
                     }
                }

                // Check for minimal page size: InDesign can't handle pages smaller then 0.5mm
                //------
                var minimumPageWidth = myApp.NumCon.convert(myApp, myApp.Settings.minPageWidthINDD, "mm", mminch.selection.text, 4); // Minimum page width for indesign
                var thisSpine   = parseFloat(mySpine.text);
                var thisWidth   = parseFloat(myWidth.text);
                var thisHeight  = parseFloat(myHeight.text);

                if(thisSpine <= minimumPageWidth || thisWidth <= minimumPageWidth || thisHeight <= minimumPageWidth){
                    alert(String(myApp.Localise.UIalert['SPINE_WIDTH_HEIGHT_should_be_at_least']) + minimumPageWidth + " " + mminch.selection.text);
                    return null;
                }

                // All good. But before we close the user interface
                // let's safe settings to -last used- preset and set the Cover (C) object
                // This is the object that this function will return at the end.
                //------
                if(add2Presets(myApp, lastUsed, true)){
                    myApp.JSON.saveFile(myApp, f, MyPresets);
                    C = MyPresets.presets[MyPresets.presets.length-1];
                    myWindow.close();
                } else {
                    alert(String(myApp.Localise.UIalert['trouble_saving_settings']));
                    return null;
                }
            } catch(err){
                alert(String(myApp.Localise.UIalert['encountered_error']) + err);
                return null;
            }
        }
        presetBut.onClick = function () {
            if(presetBut.text == savePS){
                //create preset
                var cp = add2Presets(myApp, prompt(String(myApp.Localise.UIalert['Name'])));
                if(cp == "error"){
                    //User is allready up-to-date!
                } else if(cp != true){ //reset presets
                    alert(String(myApp.Localise.UIalert['Error_creating_presets']) + String(myApp.Localise.UIalert['Please_check_input']));
                } else {
                    //update dialog
                    presets.add('item', formatPresetName(MyPresets.presets[MyPresets.presets.length-1]) );
                    presets.items[MyPresets.presets.length].selected = true; //no need to subtract 1 as array includes --save presets-- item at 0
                    try{
                        myApp.JSON.saveFile(myApp, f, MyPresets);
                    } catch(e){
                        alert(String(myApp.Localise.UIalert['Error_saving_presets'])+e.description);
                    }
                }
            } else if(presetBut.text == clearPS){
                //delete preset
                var index = parseInt(presets.selection);
                MyPresets.presets.splice(index-1,1);
                presets.remove(presets.selection);
                presets.selection = 0;
                myApp.JSON.saveFile(myApp, f, MyPresets);
            } else {
                alert(String(myApp.Localise.UIalert['Error_saving_presets']) + "presetBut.text = " + presetBut.text);
            }
        }
        presets.onChange = function () {
            presetChange = true;
            if(presets.selection-1 >= 0){
                //make sure user can't delete last used settings
                if(MyPresets.presets[presets.selection-1].name != String(myApp.Localise.UI['LastUsed'])){
                    presetBut.text = clearPS;
                } else {
                    presetBut.text = savePS;
                }
                // Loading presets in UI
                loadUIdata(MyPresets.presets[presets.selection-1]);
            } else {
                presetBut.text = savePS;
            }
            presetChange = false;
        }
        mminch.onChange = function () {
            if(presetChange == false){
                presets.selection = 0;
                presetBut.text = savePS;
                //ask user if he wants to convert numbers
                if(confirm(String(myApp.Localise.UIalert['Convert_numbers']))===true){
                    convert2(mminch.selection.text);
                }
            }
        }
        myWidth.onChange = function () {
            presets.selection = 0;
            presetBut.text = savePS;
            myWidth.text = parseFloat(myWidth.text.replace(",", "."));
            if(parseFloat(myWidth.text) <= parseFloat(myHinge.text) && hingeDropdown.selection == 0){
                hingeDropdown.selection = 1;
            }
        }
        myHeight.onChange = function () {
            presets.selection = 0;
            presetBut.text = savePS;
            myHeight.text = parseFloat(myHeight.text.replace(",", "."))
        }
        mySpine.onChange = function () {
            presetBut.text = savePS;
            mySpine.text = parseFloat(mySpine.text.replace(",", "."));
        }
        myBleed.onChange = function () {
            presetBut.text = savePS;
            myBleed.text = parseFloat(myBleed.text.replace(",", "."));
            if(parseFloat(myBleed.text) <= parseFloat(myWrap.text) && wrapDropdown.selection == 0){
                wrapDropdown.selection = 1;
                alert(String(myApp.Localise.UIalert['Cant_subtract_wrap_from_bleed']));
            }
        }
        myFlapQB.onChange = function () {
            if(presetChange == false){
               presets.selection = 0;
               presetBut.text = savePS;
               myFlapQB.text = parseFloat(myFlapQB.text.replace(",", "."));
               if(parseFloat(myFlapQB.text) > 0 && flapQBDropdown.selection == 0){
                    foldDropdown.visible = true;
                    myFold.visible = true;
                } else {
                    foldDropdown.visible = false;
                    myFold.visible = false;
                }
            }
        }
        wrapDropdown.onChange = function () {
            if(presetChange == false){
                presets.selection = 0;
                presetBut.text = savePS;
            }
            if(parseFloat(myBleed.text) <= parseFloat(myWrap.text) && wrapDropdown.selection == 0 && presetChange == false){
                wrapDropdown.selection = 1;
                alert(String(myApp.Localise.UIalert['Cant_subtract_wrap_from_bleed']));
            }
        }
        hingeDropdown.onChange = function () {
            if(presetChange == false){
                presets.selection = 0;
                presetBut.text = savePS;
            }
            if(parseFloat(myWidth.text) <= parseFloat(myHinge.text) && hingeDropdown.selection == 0){
                hingeDropdown.selection = 1;
                alert(String(myApp.Localise.UIalert['Cant_subtract_hinge_from_cover']));
            }
        }
        flapQBDropdown.onChange = function () {
            if(presetChange == false){
                presets.selection = 0;
                presetBut.text = savePS;
                if(this.selection != 0){
                    foldDropdown.visible = false;
                    myFold.visible = false;
                } else {
                    if(parseFloat(myFlapQB.text) > 0){
                        foldDropdown.visible = true;
                        myFold.visible = true;
                    }
                }
            }
        }
        foldDropdown.onChange = function () {
            if(presetChange == false){
                presets.selection = 0;
                presetBut.text = savePS;
                if(parseFloat(myFlapQB.text) <= parseFloat(myFold.text) && flapQBDropdown.selection == 0 && this.selection == 0){
                    this.selection = 1;
                    alert(String(myApp.Localise.UIalert['Cant_subtract_foldover_from_flaps']));
                }
            }
        }
        myHinge.onChange = function () {
            presets.selection = 0;
            myHinge.text = parseFloat(myHinge.text.replace(",", "."));
            if(parseFloat(myHinge.text) >= parseFloat(myWidth.text)){
                hingeDropdown.selection = 1;
            }
        }
        myFold.onChange = function () {
            presetBut.text = savePS;
            myFold.text = parseFloat(myFold.text.replace(",", "."));
            if(parseFloat(myFold.text) >= parseFloat(myFlapQB.text)){
                foldDropdown.selection = 1;
            }
        }
        myWrap.onChange = function () {
            presetBut.text = savePS;
            myWrap.text = parseFloat(myWrap.text.replace(",", "."));
            if(parseFloat(myBleed.text) <= parseFloat(myWrap.text) && wrapDropdown.selection == 0 && presetChange == false){
                wrapDropdown.selection = 1;
                alert(String(myApp.Localise.UIalert['Cant_subtract_wrap_from_bleed']));
            }
        }

        function getCoverObjectFromUI(myApp, newName){
            //This function reads the dialog data and creates a cover object to inspect
            var newFlap, newFold, newQB, newInExQB = 0;
            if(flapQBDropdown.selection == 0){
                newFlap = myApp.NumCon.NaN20(parseFloat(myFlapQB.text));
                if(myFold.visible){
                    newFold = myApp.NumCon.NaN20(parseFloat(myFold.text));
                } else {
                    newFold = 0;
                }
                newQB = 0;
            } else {
                newFlap = 0;
                newFold = 0;
                newQB = myApp.NumCon.NaN20(parseFloat(myFlapQB.text));
                if(flapQBDropdown.selection == 2){
                    newInExQB++;
                }
            }
            if(isNaN(myApp.Settings.standardPPI)){
                alert(String(myApp.Localise.UIalert['Error_reading_settings']));
                //continue
                myApp.Settings.standardPPI = 300;
            }

            return { name: newName,
                     width: myApp.NumCon.NaN20(parseFloat(myWidth.text)),
                     height: myApp.NumCon.NaN20(parseFloat(myHeight.text)),
                     spine: myApp.NumCon.NaN20(parseFloat(mySpine.text)),
                     ppi: myApp.Settings.standardPPI,
                     bleed: myApp.NumCon.NaN20(parseFloat(myBleed.text)),
                     hinge: myApp.NumCon.NaN20(parseFloat(myHinge.text)),
                     inExCludeHinge: myApp.NumCon.NaN20(parseFloat(hingeDropdown.selection)),
                     binding: newQB,
                     inExCludeQB:newInExQB,
                     flap: newFlap,
                     fold: newFold,
                     inExCludeFold: myApp.NumCon.NaN20(parseFloat(foldDropdown.selection)),
                     wrap: myApp.NumCon.NaN20(parseFloat(myWrap.text)),
                     inExCludeWrap: myApp.NumCon.NaN20(parseFloat(wrapDropdown.selection)),
                     margin: MarginObj,
                     measureUnit: myApp.NumCon.NaN20(parseFloat(mminch.selection)),
                     resolved: false };
        }

        function loadUIdata(thisC){
            // This function loads a Cover object into the menu
            mminch.selection        = thisC.measureUnit;
            myWidth.text            = thisC.width;
            myHeight.text           = thisC.height;
            mySpine.text            = thisC.spine;
            myBleed.text            = thisC.bleed;
            hingeDropdown.selection = thisC.inExCludeHinge;
            myHinge.text            = thisC.hinge;
            wrapDropdown.selection  = thisC.inExCludeWrap;
            myWrap.text             = thisC.wrap;
            foldDropdown.selection  = thisC.inExCludeFold;
            MarginObj               = thisC.margin;
            marginBut.text          = marginButPreset;
            updateMarginText();

            if(thisC.binding > 0){
                foldDropdown.visible = false;
                myFold.visible = false;
                if(thisC.inExCludeQB == 0){
                    flapQBDropdown.selection = 1;
                } else { //inexclude === 1
                    flapQBDropdown.selection = 2;
                }
                myFlapQB.text = thisC.binding;
            } else {
                flapQBDropdown.selection = 0;
                myFlapQB.text = thisC.flap;

                myFold.text = thisC.fold;

                if(myFlapQB.text > 0){
                    myFold.visible = true;
                    foldDropdown.visible = true;
                } else {
                    myFold.visible = false;
                    foldDropdown.visible = false;
                }
            }
        }

        function formatPresetName(Preset){
            if(Preset.name.length < 4){
                var mt = "\t\t\t\t( ";
            } else if (Preset.name.length < 8){
                var mt = "\t\t\t( ";
            } else if (Preset.name.length < 12){
                var mt = "\t\t( ";
            } else {
                var mt = "\t( ";
            }
            return Preset.name.toUpperCase() + mt + Preset.height + " \u00D7 " + Preset.width + " )";
        }

        function add2Presets(myApp, newName, overwriteLastUsed){
            var overwriteLastUsed = overwriteLastUsed || false;
            if(overwriteLastUsed.constructor != Boolean){
                overwriteLastUsed =  false;
                //I want to know if we receive something unexpected
                alert(String(myApp.Localise.UIalert['encountered_error']) + "indd_coverbuilder.UI.jsxinc -> add2Presets -> Expected Boolean" );
            }
            if(typeof newName == 'string'){
                if( (newName != lastUsed) || overwriteLastUsed){
                    //check if newName is allready in list, if so remove the old one
                    var plen = MyPresets.presets.length-1;
                    for (var i = plen; i >= 0; i--) {
                        if(MyPresets.presets[i].name == newName){
                          //ask if the user wants to overwrite this preset
                          if(overwriteLastUsed){
                              var cool = true;
                          } else {
                              var cool = confirm(String(myApp.Localise.UI['overwrite_preset']));
                          }
                          if(cool){
                              MyPresets.presets.splice(i,1);
                              presets.remove(i+1);
                          } else {
                              return "error";
                          }
                        }
                    }
                }

                try{
                    MyPresets.presets.push(getCoverObjectFromUI(myApp, newName));
                } catch (e) {
                    alert(e);
                }
                return myApp.STools.sameProps(MyPresets, myApp.STools.PresetObj); //report back if it went well
            } //end check for string
            return "error";
        }

        function resetPresetDrop(){
            if(presetChange === false){
                dlg.presetDrop.items[0].selected = true;
            }
        }

        function convert2(unit){
            switch(unit){
                case "mm":
                    myWidth.text    = myApp.NumCon.doRound(myApp.NumCon.inch2mm(myWidth.text),2);
                    myHeight.text   = myApp.NumCon.doRound(myApp.NumCon.inch2mm(myHeight.text),2);
                    mySpine.text    = myApp.NumCon.doRound(myApp.NumCon.inch2mm(mySpine.text),2);
                    myBleed.text    = myApp.NumCon.doRound(myApp.NumCon.inch2mm(myBleed.text),2);
                    myFlapQB.text   = myApp.NumCon.doRound(myApp.NumCon.inch2mm(myFlapQB.text),2);
                    myHinge.text    = myApp.NumCon.doRound(myApp.NumCon.inch2mm(myHinge.text),2);
                    myFold.text     = myApp.NumCon.doRound(myApp.NumCon.inch2mm(myFold.text),2);
                    myWrap.text     = myApp.NumCon.doRound(myApp.NumCon.inch2mm(myWrap.text),2);
                    break;
                case "inch":
                    myWidth.text    = myApp.NumCon.doRound(myApp.NumCon.mm2inch(myWidth.text),3);
                    myHeight.text   = myApp.NumCon.doRound(myApp.NumCon.mm2inch(myHeight.text),3);
                    mySpine.text    = myApp.NumCon.doRound(myApp.NumCon.mm2inch(mySpine.text),3);
                    myBleed.text    = myApp.NumCon.doRound(myApp.NumCon.mm2inch(myBleed.text),3);
                    myFlapQB.text   = myApp.NumCon.doRound(myApp.NumCon.mm2inch(myFlapQB.text),3);
                    myHinge.text    = myApp.NumCon.doRound(myApp.NumCon.mm2inch(myHinge.text),3);
                    myFold.text     = myApp.NumCon.doRound(myApp.NumCon.mm2inch(myFold.text),3);
                    myWrap.text     = myApp.NumCon.doRound(myApp.NumCon.mm2inch(myWrap.text),3);
                    break;
                default:
                    alert(String(myApp.Localise.UIalert['Unable_to_convert_values']));
            }
        }

        if(LoadCoverObject){
            // Fill the dialog with data
            loadUIdata(Cool);
        } else if(myApp.Settings.autoload_last_used_settings){
            presets.selection = MyPresets.presets.length;
        }

        presetChange = false;
        myWindow.show();

        return C;
    }

    //--------------------------------------------------------------------------------------------------- START SHOW MARGIN WINDOW
    function showMarginWindow(myApp, C){
        // Param C Object
        // Returns margin object, either original C margin or with updated values

        function panel(thisGroup, panelName, theseMargins) {
            this.changeInternal = false;

            // panel class
            this.name = panelName;
            this.linkedPanels = new Array();

            if(theseMargins.facing){
                this.inside_left_text = String(myApp.Localise.UI['Inside']);
                this.outside_right_text = String(myApp.Localise.UI['Outside']);
            } else {
                this.inside_left_text = String(myApp.Localise.UI['Left']);
                this.outside_right_text = String(myApp.Localise.UI['Right']);
            }

            this.Group = thisGroup.add ('panel', undefined, this.name);
            this.Group.margins = [15,20,15,20];
            this.Group.orientation =  "row";
            this.Group.alignment = "top";

            // C O L U M N - 1
            this.Row1 = this.Group.add ("group");
            this.Row1.orientation =  "column";
            this.Row1.alignment = "top";

            this.Row1.add ("statictext", undefined, " ");
            this.Row1.add ("statictext", undefined, " ");

             //CVR1 Outside
            this.Row1.add ("statictext", undefined, this.inside_left_text);
            this.inside_left = this.Row1.add ("edittext", undefined, theseMargins.inside_left);
            this.inside_left.characters = 6;

            // C O L U M N - 2
            this.Row2 = this.Group.add ("group");
            this.Row2.orientation =  "column";
            this.Row2.alignment = "top";

            //CVR1 Top
            this.Row2.add ("statictext", undefined, String(myApp.Localise.UI['Top']));
            this.top = this.Row2.add ("edittext", undefined, theseMargins.top);
            this.top.characters = 6;

            this.Row2.add ("statictext", undefined, " ");
            //this.Row2.add ("statictext", undefined, " ");
            this.unit = this.Row2.add ("dropdownlist", undefined, [String(myApp.Localise.UI['Mm']),String(myApp.Localise.UI['Inch']),String(myApp.Localise.UI['Pt'])]);
            this.unit.selection = theseMargins.units;

            //CVR1 Bottom
            this.Row2.add ("statictext", undefined, String(myApp.Localise.UI['Bottom']));
            this.bottom = this.Row2.add ("edittext", undefined, theseMargins.bottom);
            this.bottom.characters = 6;

            this.Row2.add ("statictext", undefined, " ");
            this.link = this.Row2.add ("checkbox", undefined, String(myApp.Localise.UI['Link']));
            this.link.value = theseMargins.linked;

            // C O L U M N - 3
            this.Row3 = this.Group.add ("group");
            this.Row3.orientation =  "column";
            this.Row3.alignment = "top";

            this.Row3.add ("statictext", undefined, " ");
            this.Row3.add ("statictext", undefined, " ");

            //CVR1 Inside
            this.Row3.add ("statictext", undefined, this.outside_right_text);
            this.outside_right = this.Row3.add ("edittext", undefined, theseMargins.outside_right);
            this.outside_right.characters = 6;

            this.getSettings = function(){
                alert(myApp.NumCon.doRound( myApp.NumCon.NaN20(parseFloat(this.top.text)),3           ));
                return {
                    top             : myApp.NumCon.doRound( myApp.NumCon.NaN20(parseFloat(this.top.text)),3           ),
                    outside_right   : myApp.NumCon.doRound( myApp.NumCon.NaN20(parseFloat(this.outside_right.text)),3 ),
                    inside_left     : myApp.NumCon.doRound( myApp.NumCon.NaN20(parseFloat(this.inside_left.text)),3   ),
                    bottom          : myApp.NumCon.doRound( myApp.NumCon.NaN20(parseFloat(this.bottom.text)),3        ),
                    facing          : theseMargins.facing,
                    units           : parseInt(this.unit.selection),
                    linked          : this.link.value,
                    ps_guides       : false
                }
            }

            this.linkPanels = function(panelArray){
                this.linkedPanels = panelArray;
            }

            this.upDate = function(ReplaceMargins){
                this.changeInternal = true; //prevent recursion
                if(this.link.value){
                    this.top.text           = ReplaceMargins.top;
                    this.outside_right.text = ReplaceMargins.outside_right;
                    this.inside_left.text   = ReplaceMargins.inside_left;
                    this.bottom.text        = ReplaceMargins.bottom;
                    this.unit.selection     = ReplaceMargins.units;
                }
                this.changeInternal = false;
            }

            var self = this;
            self.changeLinked = function(){
                if(self.link.value){
                    var marginupdate = self.getSettings();
                    for(i=self.linkedPanels.length-1; i >= 0; i--){
                        if(self.name != self.linkedPanels[i].name){
                            self.linkedPanels[i].upDate(marginupdate);
                        }
                    }
                }
            }

            self.getLinkData = function(){
                if(self.link.value){
                    for(i=self.linkedPanels.length-1; i >= 0; i--){
                        if(self.name != self.linkedPanels[i].name){
                            if(self.linkedPanels[i].link.value){
                                self.upDate(self.linkedPanels[i].getSettings());
                                return;
                            }
                        }
                    }
                }
            }
            self.link.onClick           = function(){self.getLinkData()}
            self.unit.onChange          = function(){if(!self.changeInternal){self.changeLinked()}}
            self.inside_left.onChange   = function(){self.changeLinked()}
            self.outside_right.onChange = function(){self.changeLinked()}
            self.top.onChange           = function(){self.changeLinked()}
            self.bottom.onChange        = function(){self.changeLinked()}

        }
        //--------------------------------------------------------------------------------------------------- START MARGIN WINDOW
        var marginWindow = new Window ("dialog", "Set Margins");
        marginWindow.orientation =  "column";
        var CoverGroup = marginWindow.add ("Group");
        CoverGroup.orientation =  "row";

        // create page panels
        var pagePanels = new Array(),
            pagePanelBool = new Object(),
            CVR14Panel;

        // Do not call this function twice, we safe only one setting for both the front and the back!
        function insertCVR14(){
            CVR14Panel = new panel(CoverGroup, String(myApp.Localise.UI['FrontPlusBackCover']), C.margin.CVR14);
            pagePanels.push(CVR14Panel);
            pagePanelBool.CVR14Panel = true;
        }

        // start creating the panels
        // there is not always a spine
        if(parseFloat(C.spine) > 0){
            //insert spine panel
            var SpinePanel = new panel(CoverGroup, String(myApp.Localise.UI['Spine']), C.margin.Spine);
            pagePanels.push(SpinePanel);
            pagePanelBool.SpinePanel = true;
            // check if there is a flap or quarter binding
            if( (parseFloat(C.flap) > 0) || (parseFloat(C.binding) > 0) ){
                if( parseFloat(C.flap) > 0 ){
                    insertCVR14();
                    var FlapsPanel = new panel(CoverGroup, String(myApp.Localise.UI['Flaps']), C.margin.Flaps);
                    pagePanels.push(FlapsPanel);
                    pagePanelBool.FlapsPanel = true;
                    pagePanelBool.QBPanel = false;
                } else { // C.binding > 0
                    var QBPanel = new panel(CoverGroup, String(myApp.Localise.UI['Binding']), C.margin.QB);
                    pagePanels.push(QBPanel);
                    pagePanelBool.QBPanel = true;
                    pagePanelBool.FlapsPanel = false;
                    insertCVR14();
                }
            } else {
                insertCVR14();
            }
        } else {
            insertCVR14();
        }

        //update panels in class so they can interact
        for(i=pagePanels.length-1; i >= 0; i--){
            pagePanels[i].linkPanels(pagePanels);
        }

        // BUTTONS ///////////////////////////////////////////////
        var myButtonGroup = marginWindow.add ("group");
            myButtonGroup.margins = [20,5,20,15];
            myButtonGroup.alignment = "center";
            myButtonGroup.add ("button", undefined, String(myApp.Localise.UI['Cancel']), {name:"cancel"} );
            myButtonGroup.add ("button", undefined, String(myApp.Localise.UI['Ok']), {name:"ok"} );
        // BUTTONS ///////////////////////////////////////////////

        var myResult = marginWindow.show();

        var myNewMarginObj = myApp.JSON.parse(myApp.JSON.stringify(C.margin));

        if(myResult == true){
            //update margin obj
            if(pagePanelBool.CVR14Panel){
                myNewMarginObj.CVR14 = CVR14Panel.getSettings();
            }
            if(pagePanelBool.SpinePanel){
                myNewMarginObj.Spine = SpinePanel.getSettings();
            }
            if(pagePanelBool.QBPanel){
                myNewMarginObj.QB = QBPanel.getSettings();
            }
            if(pagePanelBool.FlapsPanel){
                myNewMarginObj.Flaps = FlapsPanel.getSettings();
            }
        }
        return myNewMarginObj;
    }
    //--------------------------------------------------------------------------------------------------- END MARGIN WINDOW

    ////////////
    // expose //
    ////////////
      return {
        CoverOrder : CoverOrder
    };
})();
