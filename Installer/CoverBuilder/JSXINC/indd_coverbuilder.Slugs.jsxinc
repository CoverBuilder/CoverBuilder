// CoverBuilder Slugs V2.0
// Bruno Herfst 2014 - 2015

(function() {
    //////////////
    // privates //
    //////////////
    function checkOverset(myApp, thisTextFrame, offset){
        //this function checks if text-frame has overset text and tries to fix it.
        //this function is made for smaller page sizes and we should be OK by jut adding the bleed.
        if(thisTextFrame.overflows){
            try{
                //getBleed
                oldGeoBounds = thisTextFrame.geometricBounds; //[y1, x1, y2, x2]
                newGeoBounds = [oldGeoBounds[0],oldGeoBounds[1]-offset,oldGeoBounds[2],oldGeoBounds[3]+offset];
                thisTextFrame.geometricBounds = newGeoBounds;
            }catch(err){
                alert(err);
            }
        }
    }
    function doHeight(myApp, myCover, myParagraphStyle){
        var regLayer = myApp.Tools.getAndSelectLayer(myCover, "Registration");

        var myLock = layerUnLockToggle(regLayer, true);

        //CVR1
        var mySpinePage   = myCover.pages.middleItem();
        var myPage        = myCover.pages.item(mySpinePage.index+1);
        var pageBounds    = myPage.bounds;
        var myPageWidth   = pageBounds[3]-pageBounds[1];
        var myPageHeight  = pageBounds[2]-pageBounds[0];

        //right (Only do cover spread)
        var myPage        = myCover.masterSpreads[myCover.masterSpreads.length-1].pages.lastItem();
        var pageBounds    = myPage.bounds;
        var myPageWidth   = pageBounds[3]-pageBounds[1];
        var myPageHeight  = pageBounds[2]-pageBounds[0];
        var myFrameBounds = new Array (0,myPageWidth+myCover.documentPreferences.documentBleedOutsideOrRightOffset,myPageHeight,myPageWidth+myCover.documentPreferences.slugRightOrOutsideOffset);
        var tf1 = addTextFrame(myPage, myFrameBounds, myApp.NumCon.doRound(myPageHeight,3).toString(), myParagraphStyle, 270, "pageHeight");

        //force a new frame to group, this makes sure items in slug of master spread will show up in doc
        var myPage = myCover.masterSpreads[myCover.masterSpreads.length-1].pages.firstItem();
        var myFrameBounds = new Array (0,-myCover.documentPreferences.slugRightOrOutsideOffset,myPageHeight,-myCover.documentPreferences.documentBleedOutsideOrRightOffset);
        var tf2 = addTextFrame(myPage, myFrameBounds, " ", myParagraphStyle, 270, "forcePageHeight");

        //group text frames
        var myGroup = [tf1,tf2];
            myGroup = myPage.groups.add(myGroup);
            myGroup.label = "forcePageHeightGroup";

        layerUnLockToggle(regLayer, myLock);
    }

    function placeSizesInSlug(myApp, C, myCover){
        removeSlugMeasurements(myApp, myCover); // Make sure there are no old items
        
        var myParagraphStyle = getMeasureParagraphStyle(myApp, myCover, "measurements");
        var regLayer = myApp.Tools.getAndSelectLayer(myCover, "Registration");
        var myLock = layerUnLockToggle(regLayer, true);

        //top
        for (i=0;myCover.masterSpreads.length-1>i;i++){
            for (j=0;myCover.masterSpreads[i].pages.length>j;j++){
                var myPage        = myCover.masterSpreads[i].pages.item(j);
                var pageBounds    = myPage.bounds;
                var myPageWidth   = pageBounds[3]-pageBounds[1];
                var myFrameBounds = new Array (-myCover.documentPreferences.slugTopOffset,0,-myCover.documentPreferences.documentBleedTopOffset,myPageWidth);
                var myTextFrame   = addTextFrame(myPage, myFrameBounds, myApp.NumCon.doRound(myPageWidth,3).toString(), myParagraphStyle, 0,"pageWidth");
                checkOverset(myApp, myTextFrame, myCover.documentPreferences.documentBleedTopOffset);
            }
        }

        doHeight(myApp, myCover, myParagraphStyle);
        layerUnLockToggle(regLayer, myLock);
    }

    function getMeasureParagraphStyle(myApp, myCover, psName){
        var measureParagraphStyle = myCover.paragraphStyles.item(psName);
        if(!measureParagraphStyle.isValid) {
            // Create the measure style
            var measureParagraphStyle = myCover.paragraphStyles.add({name:psName});
            try{
                measureParagraphStyle.appliedFont = String(myApp.Settings.registration_font);
            } catch (e) {
                alert("Registration Font \n"+e.description);
                try{
                    measureParagraphStyle.appliedFont = "Helvetica"; // try a standard one
                } catch (e) {
                    //User already notified
                }
            }
            measureParagraphStyle.pointSize = "8pt";
            measureParagraphStyle.fillColor = "Registration";
            measureParagraphStyle.fillTint = 100;
            measureParagraphStyle.justification = 1667591796;
        }
        return measureParagraphStyle;
    }

    function addTextFrame(myPage, myBounds, myString, myParagraphStyle, myRotationAngle, myLabel){
        var myTextFrame = myPage.textFrames.add();
        app.activeWindow.transformReferencePoint = AnchorPoint.CENTER_ANCHOR;
        myTextFrame.rotationAngle = myRotationAngle;

        // Force indesign to stay on the right page before setting bounds
        // This is not the most elegant solution but at least it works consistentw
        app.activeWindow.transformReferencePoint = AnchorPoint.BOTTOM_LEFT_ANCHOR;
        myTextFrame.move(myPage, [0.05, 0.05]); //Page canâ€™t be smaller than 0.5mm this number works in any measurement unit :)

        myTextFrame.geometricBounds = [myBounds[0], myBounds[1], myBounds[2], myBounds[3]];

        myTextFrame.contents = myString;
        myTextFrame.textFramePreferences.verticalJustification = VerticalJustification.CENTER_ALIGN;

        myTextFrame.label = myLabel;
        myTextFrame.paragraphs[0].appliedParagraphStyle = myParagraphStyle;
        return myTextFrame;
    }

    function positionSlugWidth(C, myPage, myItem){
        var myLock = layerUnLockToggle(myItem.itemLayer, true);
        myItem.geometricBounds = [-C.bleed-myApp.NumCon.convert(myApp, myApp.Settings.mmSlug, "mm", C.measureUnit), 0, -C.bleed, myPage.w];
        myItem.contents = myApp.NumCon.doRound(myPage.w,3).toString();
        layerUnLockToggle(myItem.itemLayer, myLock);
    }

    function updateSpineSlug(myApp, myCover, C){
        //ref to spinepage
        var mSpine         = myApp.Tools.getMasterPage(myApp, myCover, "CB-spine", 0);
        var slugWidthFrame = myApp.Tools.getItemByLabel(mSpine.page, "pageWidth");
        if(slugWidthFrame != null){
            positionSlugWidth(C, mSpine, slugWidthFrame);
        }
        try{
            resetHeight(myApp,myCover);
        } catch(err){
            alert(err.description);
        }
    }

    function resetHeight(myApp,myCover){
        try {
            var CVR4     = myApp.Tools.getMasterPage(myApp, myCover, "CB-cover", 0);
            var groupFix = myApp.Tools.getItemByLabel(CVR4.spread, "forcePageHeightGroup");
            if(groupFix != null){
                var myLayer = groupFix.itemLayer;
                if(myLayer.isValid){
                    var myParaS = getMeasureParagraphStyle(myApp, myCover, "measurements");
                    //check if it is locked
                    var myLock = layerUnLockToggle(myLayer, true);
                    groupFix.remove();
                    doHeight(myApp, myCover, myParaS);
                    layerUnLockToggle(myLayer, myLock);
                } else {
                    throw "Slugs.resetHeight(): Layer invalid.";
                }
            } else {
                throw "Slugs.resetHeight(): No forcePageHeightGroup";
            }
        } catch(e) {
            // Let's see if there are any old measurements, we don't want to add them if they where purposely removed.
            if(removeFromMasterSpreads(myApp, myCover,["CB-WxH","CB-spine","CB-cover"],["pageHeight"])){
                try{
                    var myParaS = getMeasureParagraphStyle(myApp, myCover, "measurements");
                    doHeight(myApp, myCover, myParaS);
                } catch(e) {
                    alert(e.description);
                }
            }
        }
    }

    function removeFromMasterSpreads(myApp, myCover, masters, scriptLabels){
        var removedItems = false;
        for (var m=0; masters.length > m; m++){
            for (var ii=0; scriptLabels.length > ii; ii++){
                try{
                    var myItems = myApp.Tools.getItemByLabel(myCover.masterSpreads.item(masters[m]), scriptLabels[ii], true);
                    if(myItems != null){
                        for(var i = 0; myItems.length > i; i++){
                            var myItem = myItems[i];
                            var myLayer = myItem.itemLayer;
                            if(myLayer.isValid){
                                var myLock = layerUnLockToggle(myLayer, true);
                                myItem.remove();
                                removedItems = true;
                                layerUnLockToggle(myLayer, myLock);
                            }
                        }
                    }
                }catch(nothing){
                    //alert(nothing);
                };
            }
        }
        return removedItems;
    }
    
    function removeSlugMeasurements(myApp, myCover){
        try{
            removeFromMasterSpreads(myApp, myCover,["CB-WxH","CB-spine","CB-cover"],["forcePageHeightGroup","pageHeight","pageWidth"]);
        } catch(err) {
            alert(err);
        }
    }

    function layerUnLockToggle(myLayer, myLock){
        if(myLock == undefined){
            myLock = myLayer.locked;
        }
        if(myLock){
            //unlock
            myLayer.locked = false;
            return myLock;
        } else {
            myLayer.locked = true;
            return myLock;
        }
    }

    ////////////
    // expose //
    ////////////
    return {
        updateSpineSlug          : updateSpineSlug,
        resetHeight              : resetHeight,
        placeSizesInSlug         : placeSizesInSlug,
        getMeasureParagraphStyle : getMeasureParagraphStyle,
        addTextFrame             : addTextFrame,
        removeSlugMeasurements   : removeSlugMeasurements
    };
})();
