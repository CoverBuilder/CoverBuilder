// Number Conversion
// Bruno Herfst 2014
// Version 1.1

(function() {
    //////////////
    // privates //
    //////////////
    function mm2pt(num) {
        //1 millimetre = 2.83464567 PostScript points
        return num*2.83464567;
    }
    function mm2inch(num) {
        //1 inch = 25.4 millimetres
        return num/25.4;
    }
    function inch2mm(num) {
        //1 inch = 25.4 millimetres
        return num*25.4;
    }
    function inch2pt(num) {
        //1 inch = 72 postscript points
        return num*72;
    }
    function pt2inch(num) {
        //1 inch = 72 postscript points
        return num/72;
    }
    function pt2mm(num) {
        //1 millimetre = 2.83464567 PostScript points
        return num/2.83464567;
    }

    function cUnit(myApp, mUnits){
        switch (mUnits) {
            case 0:
            case "mm":
            case String(myApp.Localise.UI['Mm']):
            case "MILLIMETERS":
            case 2053991795: //mm
                return 0;
                break;
            case 1:
            case "inch":
            case String(myApp.Localise.UI['Inch']):
            case "INCHES":
            case 2053729891: //inch
                return 1;
                break;
            case 2:
            case "pt":
            case String(myApp.Localise.UI['Pt']):
            case "POINTS":
            case 2054188905: //pt
                return 2;
                break;
            default:
                return null;
        }
    }

    function convert(myApp, measure, unitInput, unitOutput, roundDec){
        // validate input
        try{
            var validInput  = myApp.STools.checkMeasureUnit( myApp, unitInput  );
            var validOutput = myApp.STools.checkMeasureUnit( myApp, unitOutput );
        } catch(err){
            alert(err);
        }

        if( (typeof validInput == "number") && (typeof validOutput == "number") && (typeof measure == "number") ){
            var convertedMeasure = undefined;
            // Lets convert the items
            switch (validInput) {
                case 0: //from mm
                    switch (validOutput) {
                        case 0: //to mm
                            convertedMeasure = measure;// No need for conversion
                            break;
                        case 1: //to inch
                            convertedMeasure = mm2inch(measure);
                            break;
                        case 2: //to pt
                            convertedMeasure = mm2pt(measure);
                            break;
                        default:
                            alert("number.conversion.convert: Could not convert units from millimeters.");
                            break;
                    }
                    break;
                case 1: //from inch
                    switch (validOutput) {
                        case 0: //to mm
                            convertedMeasure = inch2mm(measure);
                            break;
                        case 1: //to inch
                            convertedMeasure = measure; // No need for conversion
                            break;
                        case 2: //to pt
                            convertedMeasure = inch2pt(measure);
                            break;
                        default:
                            alert("number.conversion.convert: Could not convert units from millimeters.");
                            break;
                    }
                    break;
                case 2: //from pt
                    switch (validOutput) {
                        case 0: //to mm
                            convertedMeasure = pt2mm(measure);
                            break;
                        case 1: //to inch
                            convertedMeasure = pt2inch(measure);
                            break;
                        case 2: //to pt
                            convertedMeasure = measure;// No need for conversion
                            break;
                        default:
                            alert("number.conversion.convert: Could not convert units from millimeters.");
                            break;
                    }
                    break;
                default:
                    alert("number.conversion.convert: Could not convert units.");
                    break;
            }
            // R E T U R N
            // Round Units
            if(typeof roundDec == "number"){
                roundDec = parseInt(roundDec);
                convertedMeasure = doRound(convertedMeasure, roundDec);
            }
            return convertedMeasure;
        } else {
            // We have not returned elsewhere
           alert("Could not convert " + measure + " from " + unitInput + " to " + unitOutput);
           return measure;
        }
    }

    function NaN20(num){
        if(isNaN(num)){
            return 0;
        } else {
            return num;
        }
    }

    function doRound(num, roundDec) {
        var roundMulit = Math.pow(10,roundDec);
        return Math.round(num*roundMulit)/roundMulit;
    }

    function constrain(_number, _min, _max, _warn, _message){
        var warn = _warn || false;
        var clipped = Math.max(Math.min(_number, _max), _min);
        if(warn && clipped != _number){
            alert(_message);
        }
        return clipped;
    }

    ////////////
    // expose //
    ////////////
    return {
        convert        : convert,
        mm2pt          : mm2pt,
        mm2inch        : mm2inch,
        inch2mm        : inch2mm,
        inch2pt        : inch2pt,
        pt2inch        : pt2inch,
        pt2mm          : pt2mm,
        cUnit          : cUnit,
        NaN20          : NaN20,
        constrain      : constrain,
        doRound        : doRound
    };
})();
