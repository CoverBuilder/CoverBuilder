// InDesign Javascript Libtools
// Bruno Herfst 2014

(function () {
    //////////////
    // privates //
    //////////////

    function getLibUI( myApp, myFolderPath, myDialogName, open, canAddOrRemove ){
        // This function opens a UI to select a library that is inside
        // a given folder. It replies with a file object of the chosen lib
        // or null; Note that it will not open the file!

        // It also adds functionality to add or remove a lib if the folder paths is not the plugins LIB path
        // Note: Subfolders are not protected
        var open = open || false;
        var canAddOrRemove = canAddOrRemove || false;

        var UItext = {remove:"Delete", add: "Add New"};

        var myFiles    = Folder(myFolderPath).getFiles("*.indl");
        var myFilesNo  = myFiles.length;
        var myLibFiles = new Array();

        if(!myFilesNo){
             myLibFiles[0] = String(myApp.Localise.Menu['NoFilesFound']);
        }else{
             for(var i=0; i < myFilesNo; i++){
                  myLibFiles.push(myFiles[i].displayName.substr(0,myFiles[i].displayName.lastIndexOf(".")));
             }
        }

        var myDialog = new Window ("dialog", myDialogName);
            myDialog.orientation = "row";
            myDialog.alignChildren = "top";

        var myLibGroup = myDialog.add ("panel");
            myLibGroup.orientation = "column";
            myLibGroup.alignChildren = "left";
            myLibGroup.margins = 15;

        var myLibDrop = myLibGroup.add ("dropdownlist", undefined, myLibFiles);
            myLibDrop.selection = 0;

        if(canAddOrRemove){
            var myLibButGroup = myLibGroup.add ("group");
            myLibButGroup.orientation = "row";
            myLibButGroup.margins.top = 10;

            var myAddRemoveButton = myLibButGroup.add ("button", undefined, UItext.add);
            var myAddRemoveButton = myLibButGroup.add ("button", undefined, UItext.remove);
            if(myFilesNo <= 0){
                myAddRemoveButton.enabled = false;
            }
        }

        var myButtonGroup = myDialog.add ("group");
            myButtonGroup.alignChildren = "left";
            myButtonGroup.orientation = "column";
        var ok = myButtonGroup.add ("button", undefined, "OK");
        var cancel = myButtonGroup.add ("button", undefined, "Cancel");

        if(myDialog.show() == 1){
            if(myFilesNo > 0){
                if(open){
                    return myApp.LibTool.openLib( myFiles[myLibDrop.selection.index] );
                } else {
                    return myFiles[myLibDrop.selection.index];
                }
            }
        }
        return null;
    }

    function createLib(myLibPath){
        var thisLib = new File(myLibPath);
        if (thisLib.exists) {
            return app.open(thisLib,false);
        } else {    
            return app.libraries.add(thisLib,false);
        }
    }

    function openLib(myLibPath){
        if(File(myLibPath).exists == false){
            //Display a dialog.
            var thisLib = myLibPath.replace(/^.*(\\|\/|\:)/, '');
            myLibPath = File.openDialog("Where is " + thisLib + "?");
        }
        if(myLibPath != null){
                //open lib
                myTarg = File(myLibPath);
                myLib = app.open(myTarg,false);
        } else {
            myLib = null;
        }
        return myLib;
    }

    function addToLib(lib, elements, name, description, label) {
        if(!lib.isValid){
            alert("CoverBuilder.LibTools addToLib:/n That was not a valid library.");
            exit();
        }
        try {
            if(elements.constructor !== Array){ // So we can send single items too
                elements = [elements];
            }
            lib.store(elements, {name: String(name), description: String(description), label: String(label)} );
        }catch (e) {
            alert("CoverBuilder Add to Lib Error:\n" + e.message +  " (Line " + e.line + " in file " + e.fileName + ")");
        }
    }

    function LibObjectWith(myLib,assetName) {
        if(!myLib.isValid){
            alert("CoverBuilder.LibTools LibObjectWith:/n That was not a valid library.");
            exit();
        }
        this.asset = myLib.assets.item(assetName);
        if(!this.asset.isValid){
            alert("CoverBuilder.LibTools LibObjectWith:/nCan’t find " + assetName + " in library " + myLib.name);
            exit();
        }
        this.name    = assetName;
        this.offsetX = 0;
        this.offsetY = 0;
        this.anchor  = "TOP_LEFT";
            // TOP_CENTER, TOP_LEFT, TOP_RIGHT,
            // CENTER, LEFT_CENTER, RIGHT_CENTER,
            // BOTTOM_CENTER, BOTTOM_LEFT, BOTTOM_RIGHT

        // Try and parse original size from description
        try{
            eval("var sizeObj = " + String(this.asset.description) + ";"); // {unit:0,w:5,h:5} == 5mm x 5mm
            this.measureUnit = sizeObj.unit;
            this.width       = sizeObj.w;
            this.height      = sizeObj.h;
            this.ratio       = sizeObj.h / sizeObj.w;
            this.height      = this.width * this.ratio;
        } catch(e) {
            this.measureUnit = undefined;
            this.width       = undefined;
            this.height      = undefined;
            this.ratio       = undefined;
        }
        this.toWidth = function(newWidth){
            this.ratio  = this.height / this.width;
            this.width  = newWidth;
            this.height = newWidth * this.ratio;
        }
        this.convertToUnits = function (myApp, myMeasureUnits){
            // validate input
            var myMeasureUnits   = myApp.STools.checkMeasureUnit(myApp, myMeasureUnits);
            var thisMeasureUnits = myApp.STools.checkMeasureUnit(myApp, this.measureUnit);

            if(isNaN(myMeasureUnits)){
                alert("Could not convert libObject " + this.name +  "\nFrom measureUnit: " + this.measureUnit + " To: " + myMeasureUnits);
                return;
            }
            if(isNaN(thisMeasureUnits)){ // Make sure that we are good to go.
                alert("Could not convert libObject " + this.name + "\nNo measure defined in description.");
                return;
            }
            this.width       = myApp.NumCon.convert(myApp, this.width,   this.measureUnit, myMeasureUnits);
            this.height      = myApp.NumCon.convert(myApp, this.height,  this.measureUnit, myMeasureUnits);
            this.offsetX     = myApp.NumCon.convert(myApp, this.offsetX, this.measureUnit, myMeasureUnits);
            this.offsetY     = myApp.NumCon.convert(myApp, this.offsetY, this.measureUnit, myMeasureUnits);
            this.measureUnit = myMeasureUnits;
        }
        this.label = null;
        return this;
    }

    function addOffset(xyPos, xyOffset){
        xyPos[0] += xyOffset[0];
        xyPos[1] += xyOffset[1];
        return xyPos;
    }

    function placeItem(myApp,myPage,AssetObj,C){
            //Make sure facing pages is off
            function getPageInfo(myPage){
                this.l = myPage.label;
                this.b = myPage.bounds; // [y1, x1, y2, x2]
                this.w = myPage.bounds[3]-myPage.bounds[1];
                this.h = myPage.bounds[2]-myPage.bounds[0];
                return this;
            }
            //get pageinfo
            var myPageinfo = new getPageInfo(myPage);
            //place asset in doc
            var myDoc = myPage.parent.parent;
            var thisAsset = AssetObj.asset.placeAsset(myDoc);

            //make sure it’s the right size (AssetObj can contain scaled measurements, if it does we want the object to be scaled as instructed)
            var thisAssetBounds = thisAsset[0].geometricBounds; //[y1, x1, y2, x2]
            var correctBounds = [thisAssetBounds[2] + AssetObj.height, thisAssetBounds[3] + AssetObj.width, thisAssetBounds[2], thisAssetBounds[3]];
            thisAsset[0].geometricBounds = correctBounds;

            var pos = [0,0]; //xy
            switch (AssetObj.anchor){
                case "BOTTOM_CENTER":
                    pos = [(myPageinfo.w/2)-(AssetObj.width/2) , myPageinfo.h-AssetObj.height];
                    break;
                case "BOTTOM_LEFT":
                    pos = [0 , myPageinfo.h-AssetObj.height];
                    break;
                case "BOTTOM_RIGHT":
                    pos = [myPageinfo.w-AssetObj.width , myPageinfo.h-AssetObj.height];
                    break;
                case "CENTER":
                    pos = [(myPageinfo.w/2)-(AssetObj.width/2) , (myPageinfo.h/2)-(AssetObj.height/2)];
                    break;
                case "LEFT_CENTER":
                    pos = [0 , (myPageinfo.h/2)-(AssetObj.height/2)];
                    break;
                case "RIGHT_CENTER":
                    pos = [(myPageinfo.w/2)-(AssetObj.width/2) , 0];
                    break;
                case "TOP_CENTER":
                    pos = [(myPageinfo.w/2)-(AssetObj.width/2) , 0];
                    break;
                case "TOP_RIGHT":
                    pos = [myPageinfo.w-AssetObj.width , 0];
                    break;
                default: //TOP_LEFT
                    pos = [0 , 0];
                    break;
            }

            //add offset
            pos = addOffset(pos, [AssetObj.offsetX,AssetObj.offsetY]);

            if(typeof C != "object"){
                var myCover = myApp.Tools.getActiveCover(myApp, false);
                C = myApp.XMP.retrieveCoverObject(myApp, myCover);
            }
            //if places on the back or front cover add hinge to offset
            try{
                if(myPageinfo.l == "CVRL"){
                    pos = addOffset(pos, [-C.hinge,0]);
                }
                else if(myPageinfo.l == "CVRR"){
                    pos = addOffset(pos, [C.hinge,0]);
                }
            } catch(e) {
                // This should never happen but if it does let me know.
                alert("Indd_LibTools:placeItem() was not given a valid CoverObject.\n" + e.message +  " (Line " + e.line + " in file " + e.fileName + ")");
            }

            thisAsset[0].move(myPage);

            // force indesign to stay on the right page before setting bounds //
            // This is not the most elegant solution but at least it will always work even when InDesign changes it’s rules in the future
            app.activeWindow.transformReferencePoint = AnchorPoint.BOTTOM_LEFT_ANCHOR;
            var minPageSize = myApp.NumCon.convert(myApp, 0.4, "mm", C.measureUnit);
            thisAsset[0].move(myPage, [minPageSize, minPageSize]); //Page can’t be smaller than 0.5mm :)

            thisAsset[0].move(pos); //x,y

            if(typeof AssetObj.label == "string"){
                thisAsset[0].label = AssetObj.label;
            }
        }

        function placeSpineLogo(myApp, myCover, myLib, assetName, offsettings){
            var C = myApp.XMP.retrieveCoverObject(myApp, myCover);
            //place spinelogo
            var mySpineLogo = new myApp.LibTool.LibObjectWith(myLib,assetName);
                mySpineLogo.anchor  = "BOTTOM_CENTER";
                mySpineLogo.label = "SpineLogo";
                mySpineLogo.convertToUnits(myApp, C.measureUnit);

            // Set initial value
            var initValue = myApp.NumCon.convert(myApp, 2, "mm", C.measureUnit);
            var minimumLogoWidth = initValue, clearSpace = initValue;

            if(typeof offsettings === "object"){
                try{
                    if ( offsettings.hasOwnProperty('measureUnit') ) {
                        if ( offsettings.hasOwnProperty('y') ) {
                            mySpineLogo.offsetY += myApp.NumCon.convert(myApp, offsettings.y, offsettings.measureUnit, C.measureUnit);
                        }
                        if ( offsettings.hasOwnProperty('minWidth') ) {
                            minimumLogoWidth = myApp.NumCon.convert(myApp, offsettings.minWidth, offsettings.measureUnit, C.measureUnit);
                        }
                        if ( offsettings.hasOwnProperty('whiteSpace') ) {
                            clearSpace = myApp.NumCon.convert(myApp, offsettings.whiteSpace, offsettings.measureUnit, C.measureUnit);
                        }
                    }
                } catch(e){
                    alert("CoverBuilder LibTools: PlaceSpineLogo\n" + e.message +  " (Line " + e.line + " in file " + e.fileName + ")");
                }
            }

            if(C.spine > minimumLogoWidth + clearSpace * 2){
                if(C.spine < mySpineLogo.width + clearSpace * 2){
                    mySpineLogo.toWidth(C.spine - clearSpace * 2 );
                }
                var pageRef = myApp.Tools.getPageByLabel(myCover.spreads[0].pages, "Spine");
                myApp.LibTool.placeItem(myApp, pageRef, mySpineLogo, C);
            } else {
                alert("Spine is too small for logo.");
            }
        }
    ////////////
    // expose //
    ////////////
      return {
          getLibUI        : getLibUI,
          createLib       : createLib,
          openLib         : openLib,
          addToLib        : addToLib,
          LibObjectWith   : LibObjectWith,
          addOffset       : addOffset,
          placeItem       : placeItem,
          placeSpineLogo  : placeSpineLogo
    };

})();