/*     ___  __   __      ___   __  _   _      |  |  | |  | |   |  | |  |  \ /      |  |  | |  | |   |-<  |  |   *      |  |__| |__| |__ |__| |__| _/ \_*/// Product: CoverBuilder// Version: 3.0.3.0// Description: InDesign CS5+ Startup JavaScript// + Create template book and magazine covers// + coverbuilder.brunoherfst.com// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR// PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE// FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER// DEALINGS IN THE SOFTWARE.#targetengine "session"$.localize = true; // enable ExtendScript localisation engine// While most localised strings live at CoverBuilder.Localise// These are some strings needed before we the plugin is loadedvar localLocalised = {    Unsupported_Platform          : { en: "Unsupported platform: ",                                      de: "Unsupported platform: ",                                      nl: "Unsupported platform: ",                                      fr: "Unsupported platform: " },    Cant_find_Module              : { en: "Can't find necessary module. ",                                      de: "Can't find necessary module. ",                                      nl: "Can't find necessary module. ",                                      fr: "Can't find necessary module. " },        Expected_File_at_Location     : { en: "I expected to find a file at: ",                                      de: "I expected to find a file at: ",                                      nl: "I expected to find a file at: ",                                      fr: "I expected to find a file at: " },    Build_Fail                    : { en: "Failed to build CoverBuilder.",                                      de: "Failed to build CoverBuilder.",                                      nl: "Failed to build CoverBuilder.",                                      fr: "Failed to build CoverBuilder." },          MenuLoad_Fail                 : { en: "Failed to load CoverBuilder menus.",                                      de: "Failed to load CoverBuilder menus.",                                      nl: "Failed to load CoverBuilder menus.",                                      fr: "Failed to load CoverBuilder menus." }}// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -// STARTUP FUNCTIONS// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -function coverBuilderAlert( MSG ){    alert("CoverBuilder\n" + MSG);}function getPlatformInfo(){    var platform = File.fs;    if(platform == 'Windows'){        var trailSlash = "\\";    } else if(platform == "Macintosh") {        var trailSlash = "/";    } else {        var trailSlash = undefined;        coverBuilderAlert( localLocalised.Unsupported_Platform  + platform );    }    return {name : platform, trailSlash : trailSlash};}function cleanPath(p){    // Remove filename from path    var r = /[^\\\/]*$/;    return p.toString().replace(r, '');}// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -// MAIN// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -function main(){    // Resolve paths    //--------------    var PlatformInfo = getPlatformInfo();        var PathTo = {           plugin : cleanPath($.fileName)    }        PathTo.scriptFolder = PathTo.plugin + "JSXINC" + PlatformInfo.trailSlash;    PathTo.factory      = PathTo.scriptFolder + "coverbuilder.Factory.jsxinc";        // Only the InDesign plugin (master) can set path to plugin to path to self!    // Other scripts plugins can read the path to this plugin from settings.    PlatformInfo.pathToPlugin = PathTo.plugin;        // Locate factory file    //---------------------    var FF = new File(PathTo.factory);    if(!FF.exists){        coverBuilderAlert( localLocalised.Cant_find_Module + localLocalised.Expected_File_at_Location + PathTo.factory );        return;    }    // Run the file    //--------------    var Factory = $.evalFile( FF );    if(!Factory.hasOwnProperty("build4InDesign")) {        coverBuilderAlert( localLocalised.Build_Fail );        return;    }    // Initialise plugin    //------------------    var CoverBuilder = Factory.build4InDesign(PlatformInfo);    // Load InDesign menus    //--------------------    if(CoverBuilder.hasOwnProperty("IDmenu")) {        CoverBuilder.IDmenu.load_All_Menus(CoverBuilder);    } else {        coverBuilderAlert( localLocalised.MenuLoad_Fail );        return;    }}// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -// START// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -try {    main();} catch (e) {    // Let us know if something does not go to plan.    coverBuilderAlert( e.message + " (Line " + e.line + " in file " + e.fileName + ")");}// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -// EOF// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -