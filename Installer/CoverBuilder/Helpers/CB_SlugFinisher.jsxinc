/*

--------------------------------------------

    CB_SlugFinisher.jsx             (A CoverBuilder Helper Script)
    An InDesign CS5 Javascript      (Tested in CS6)
    Version 2.0

    Bruno Herfst 2013-2016

--------------------------------------------

*/

(function() {
    //////////////
    // privates //
    //////////////

    function go(myApp) {

        try{ // Let the user know if something unexpected happens
            //  and don't kill the function on an error
            var doc    = myApp.Tools.getActiveCover(myApp, true);
            var C      = myApp.XMP.retrieveCoverObject(myApp, doc);
            var CVR1PN = 1;

            if(C.width > 0){
                CVR1PN = myApp.Tools.getCVR1pageNo(C);

                var check = myApp.Tools.checkCagainstDoc(myApp, doc, C, true);

                if( !check.message.ok ){
                    alert("Beware!\n" + check.message.text);
                }
                // Update data if changed
                if(check.C_changed){
                    C = check.C;
                }
            }
            
            var myPage = app.activeWindow.activeSpread.pages[CVR1PN-1];
            
            if(!myPage.isValid){
                myPage = app.activeWindow.activeSpread.pages[app.activeWindow.activeSpread.pages.length-1];
            }

			var swatchOBJ = finischUI(myApp, doc, C, getSpotSwatches(myApp, doc));
			
            if (swatchOBJ == undefined) return; // User canceled
            
		    myApp.Slugs.slugSizeBigEnough(myApp, doc, true);
            
            // Slugs have changed make sure we reset measurements
        	myApp.Slugs.placeSizesInSlug(myApp, doc, C);
        					
            // Save data in doc so we can retrieve it later
			myApp.Tools.saveJSONLabel(myApp, doc, "swatchOBJ", swatchOBJ);
			
            // Get select and unlock layer
			var regLayer = myApp.Tools.getAndSelectLayer(doc, "Registration");
			var myLock = myApp.Tools.layerLocked(regLayer, false);
            var myTextFrames = myApp.Tools.getItemByLabel(myPage,"finish");
			
            if(myTextFrames.length < 1){
				var myTextFrame = createFinishFrame(myApp, doc, C, app.activeWindow.activeSpread);
			} else {
			    var myTextFrame = myTextFrames[0];
			}
			
            // This makes sure InDesign redraws the screen properly
			var myOriginalRedraw = myApp.Tools.setRedraw();
			setText(myApp, doc, myTextFrame, swatchOBJ);
			
            // Save updated C data
			var C_changed = false;

			if( C.measureUnit  != swatchOBJ.measureUnit ){
                myApp.STools.convertUnits(myApp, C, swatchOBJ.measureUnit);
				C_changed = true;
			}
			if( C.slugPageSize  != swatchOBJ.slugPageSize ){
				C.slugPageSize   = swatchOBJ.slugPageSize;
				C_changed  = true;
			}
			if( C.slugTrimSize  != swatchOBJ.slugTrimSize ){
				C.slugTrimSize   = swatchOBJ.slugTrimSize;
				C_changed  = true;
			}
            if( C.registration_font  != swatchOBJ.registration_font ){
                C.registration_font   = swatchOBJ.registration_font;
                C_changed  = true;
            }
			
            if( C_changed ){
				// Update XMP
				myApp.XMP.safeCoverObject(myApp, doc, C);
				// Update slugs
				myApp.Slugs.placeSizesInSlug(myApp, doc, C);
			}
			
			// Reset redraw preference
			myApp.Tools.setRedraw(myOriginalRedraw);
			// Reset original registration layer lock
			myApp.Tools.layerLocked(regLayer, myLock);
        } catch(e) {
            alert("Slug Finisher found a problem:\n" + e.message +  " (Line " + e.line + " in file " + e.fileName + ")");
        }
    };

    function createFinishFrame(myApp, doc, C, thisSpread){
                
        var originalRulers  = myApp.Tools.setRuler(doc, {units : C.measureUnit});
        
        var textFrameHeight = myApp.NumCon.convert(myApp, 5, "mm", C.measureUnit, 4);
        
        var len = thisSpread.pages.length-1;

        if( myApp.Tools.insideMinMaxPageSize(myApp, C.flap, C.measureUnit) ){
            var myPage = thisSpread.pages[len-1];
        } else {
            var myPage = thisSpread.pages[len];
        }

        var pageBounds = myPage.bounds;
        var myPageWidth = myApp.NumCon.doRound(pageBounds[3]-pageBounds[1], 2);
        var myPageHeight = myApp.NumCon.doRound(pageBounds[2]-pageBounds[0], 2);
        var myFrameBounds = new Array (myPageHeight+doc.documentPreferences.documentBleedBottomOffset,0,myPageHeight+doc.documentPreferences.documentBleedBottomOffset+textFrameHeight,myPageWidth);
        var myParagraphStyle = myApp.Slugs.getMeasureParagraphStyle(myApp, doc, "measurements");
        
        var finishTextFrame = myApp.Tools.addTextFrame(myApp, myPage, myFrameBounds, " ", myParagraphStyle, 0, "finish");
        
        myApp.Tools.setRuler(doc, originalRulers);
        
        return finishTextFrame 
    };

    function getSpotSwatches(myApp, doc) {
        var allSwatches = doc.swatches;
        var i = allSwatches.length;
        
        var spotSwatches = [];
        while (i--) {
            if( allSwatches[i].hasOwnProperty("model") ) {
                if (allSwatches[i].model == ColorModel.SPOT) {
                    spotSwatches.push( {name: allSwatches[i].name, checkedState: false} );
                }
            }
        }

        return spotSwatches;
    };
    
    function finischUI(myApp, doc, C, mySpotSwatches) {
        // UI elements references
        var mySpotCheckboxes = new Array();
        var myCMYKCheckboxes = new Array();
        var myFinishRadio    = new Array();
        var myNoteCheckbox   = null;
        var myNoteTextField  = null;
        
        // Data references
        var registration_font = myApp.Settings.registration_font;

        var myNote = {text: "", checkedState: false};

        var myCMYKSwatches = [{
            name: "Cyan",
            checkedState: true
        }, {
            name: "Magenta",
            checkedState: true
        }, {
            name: "Yellow",
            checkedState: true
        }, {
            name: "Black",
            checkedState: true
    	}];
    	
    	var myFinishes = [{
			name: "Lamination (Gloss)",
			checkedState: false
		}, {
			name: "Lamination (Gloss Textured)",
			checkedState: false
		},{
			name: "Lamination (Matte)",
			checkedState: false
		},{
			name: "Lamination (Matte Textured)",
			checkedState: false
		}, {
			name: "Lamination (Silk)",
			checkedState: false
		}, {
			name: "Lamination (Satin)",
			checkedState: false
		}, {
			name: "Varnish (Gloss)",
			checkedState: false
		}, {
			name: "Varnish (Matte)",
			checkedState: false
		}];

        // Load data from doc so we can set UI appropriately
        var swatchOBJ = myApp.Tools.retrieveJSONLabel(myApp, doc, "swatchOBJ");
        
        if(swatchOBJ != null){
            if( swatchOBJ.hasOwnProperty('process') ){
                myCMYKSwatches = swatchOBJ.process;
            }
            if( swatchOBJ.hasOwnProperty('finish') ){
            	myFinishes = swatchOBJ.finish;
            }
            if( swatchOBJ.hasOwnProperty('spot') ){
                // Select old swatches
                for (var i = 0; i < swatchOBJ.spot.length; i++) {
                    for (var j = 0; j < mySpotSwatches.length; j++) {
                        if(mySpotSwatches[j].name == swatchOBJ.spot[i].name){
                            mySpotSwatches[j].checkedState = swatchOBJ.spot[i].checkedState;
                        }
                    }
                }
            }
            if( swatchOBJ.hasOwnProperty('note') ){
                myNote.text         = swatchOBJ.note.text;
                myNote.checkedState = swatchOBJ.note.checkedState;
            }
            if( swatchOBJ.hasOwnProperty('registration_font') ){
                registration_font = swatchOBJ.registration_font;
            }
        };
        
        // START FONTS
        // -------------------------------------------------
        var RegistrationFont = myApp.STools.createFontObject( registration_font );
        var myFamilyList     = myApp.UI.getAvailableFontFamilies();
        var myStyleList      = [];
        var familySelected   = 0;
        var styleSelected    = 0;
  
        var regFontExist = false;
        for (var i=0; i<myFamilyList.length; i++) {
          if(myFamilyList[i] == RegistrationFont.familyName) {
              familySelected = i;
              regFontExist   = true;
          }
        }
  
        if( regFontExist ) { // Font is loaded
            var sysFontAvailableStyles = myApp.STools.getAvailableFontStyles( RegistrationFont.familyName );
            if(sysFontAvailableStyles.length > 0) {
                myStyleList = sysFontAvailableStyles;
                for (var i=0; i<myStyleList.length; i++) {
                  if(myStyleList[i] == RegistrationFont.styleName) {
                      styleSelected = i;
                  }
                }
            }
        } else { // Font is not loaded
            myFamilyList.unshift( "- " + RegistrationFont.familyName + " -");
            if(RegistrationFont.styleName != "") {
              myStyleList.unshift ( "- " + RegistrationFont.styleName  + " -");
            } else {
              myStyleList.unshift ( "- " + "None" + " -");
            }
        }
        // -------------------------------------------------
        
        
        // -------------------------------------------------
        // S T A R T   W I N D O W 
        // -------------------------------------------------
        
        var myDialog = new Window ("dialog", "Slug Tool");
            myDialog.orientation   = "column";
            myDialog.alignment     = "left";
            myDialog.alignChildren = "left";
            myDialog.margins       = [10,10,10,15];
            myDialog.spacing       = 0;

        var mainGroup = myDialog.add ("group");
            mainGroup.orientation   =  "row";
            mainGroup.alignment     = "left";
            mainGroup.alignChildren = "top";
        
        // P R O C E S S
        
        var process_panel = mainGroup.add ("panel", undefined, "PROCESS");
            process_panel.margins       = [10,20,10,10];
            process_panel.orientation   = "column";
            process_panel.alignChildren = "left";
            
            for (var myCounter = 0; myCounter < myCMYKSwatches.length; myCounter++) {
                myCMYKCheckboxes[myCounter] = process_panel.add ("checkbox", undefined, myCMYKSwatches[myCounter].name);
                myCMYKCheckboxes[myCounter].value = myCMYKSwatches[myCounter].checkedState;
            }
        
        // S P O T
        
        var spot_panel = mainGroup.add ("panel", undefined, "SPOT");
            spot_panel.margins       = [10,20,10,10];
            spot_panel.orientation   = "column";
            spot_panel.alignChildren = "left";
            
            for (var myCounter = 0; myCounter < mySpotSwatches.length; myCounter++) {
                mySpotCheckboxes[myCounter] = spot_panel.add ("checkbox", undefined, mySpotSwatches[myCounter].name);
                mySpotCheckboxes[myCounter].value = mySpotSwatches[myCounter].checkedState;
            }
        
        // F I N I S H
        
        var finish_panel = mainGroup.add ("panel", undefined, "FINISH");
            finish_panel.margins       = [10,20,10,10];
            finish_panel.orientation   = "column";
            finish_panel.alignChildren = "left";
            
            for (var myCounter = 0; myCounter < myFinishes.length; myCounter++) {
                myFinishRadio[myCounter] = finish_panel.add ("radiobutton", undefined, myFinishes[myCounter].name);
                myFinishRadio[myCounter].value = myFinishes[myCounter].checkedState;
            }
        
        // C U S T O M
        
        var custom_panel = mainGroup.add ("panel", undefined, "CUSTOM");
            custom_panel.margins       = [10,20,10,10];
            custom_panel.orientation   = "row";
            custom_panel.alignChildren = "left";
            
            myNoteCheckbox = custom_panel.add ("checkbox", undefined, "Other:");
            myNoteCheckbox.value = myNote.checkedState;
            
            myNoteTextField = custom_panel.add('edittext');
            myNoteTextField.characters = 20;
            myNoteTextField.minWidth   = 150;
            myNoteTextField.text       = myNote.text;
        
        // - - - - - - - - - - - - - - - - - - - - - - - - - - 
        
        // S I Z E S
        
        var sizesGroup = myDialog.add ("group");
            sizesGroup.margins = [10,30,10,10];
            sizesGroup.orientation =  "row";
            sizesGroup.alignment = "left";
        
        // P A G E S I Z E S
        
        var myPageSizeSlugCheckbox = sizesGroup.add ("checkbox", undefined, "Sizes");
            myPageSizeSlugCheckbox.value = C.slugPageSize;
        var mySpreadSizeSlugCheckbox = sizesGroup.add ("checkbox", undefined, "Total trim");
            mySpreadSizeSlugCheckbox.value = C.slugTrimSize;

        sizesGroup.add('statictext', undefined, ':   ');
        
        var measureDropDown = sizesGroup.add('dropdownlist',[0,0,60,30], myApp.STools.localisedValidMeasurementUnits(myApp));
            measureDropDown.selection = C.measureUnit;
        
        // T Y P E F A C E
        
        sizesGroup.add('statictext', undefined, ':   Font:');
        
        var fontFamilyNameDrop = sizesGroup.add('dropdownlist',[0,0,180,30], myFamilyList);
            fontFamilyNameDrop.selection = familySelected;
        var fontStyleNameDrop  = sizesGroup.add('dropdownlist',[0,0,180,30], myStyleList);
            fontStyleNameDrop.selection = styleSelected;
        
        fontFamilyNameDrop.onChange = function() {
            fontStyleNameDrop.removeAll();
            var sysFontAvailableStyles = myApp.STools.getAvailableFontStyles(fontFamilyNameDrop.selection.text);
            for ( var i = 0; i < sysFontAvailableStyles.length; i++ ) {
                fontStyleNameDrop.add('item',sysFontAvailableStyles[i]);
            }
            fontStyleNameDrop.selection = 0;
        }
        
        
        //----------------------------------------------------
        // Start button group
        
        var buttonGroup = myDialog.add ("group");
            buttonGroup.margins = 10;
            buttonGroup.orientation =  "row";
            buttonGroup.alignment = "right";

        //OK CANCEL buttons
        var cancelBut = buttonGroup.add ("button", undefined, String(myApp.Localise.UI['Cancel']), {name:"cancel"} );
        var saveBut   = buttonGroup.add ("button", undefined, String(myApp.Localise.UI['Ok'    ]), {name:"ok"} );

        // End Button Group
        //----------------------------------------------------
        
        // -------------------------------------------------
        // E N D  W I N D O W
        // -------------------------------------------------
        
        //Display the dialog box.
        if (myDialog.show() == true) {
            
            //Get process
            for (var i = 0; i < myCMYKCheckboxes.length; i++) {
                myCMYKSwatches[i].checkedState = myCMYKCheckboxes[i].value;
            }

            //Get Spot
            var i = mySpotCheckboxes.length;
            for (var i = 0; i < mySpotCheckboxes.length; i++) {
                mySpotSwatches[i].checkedState = mySpotCheckboxes[i].value;
            }
            
            //Get Finish
            for (var i = 0; i < myFinishes.length; i++) {
				myFinishes[i].checkedState = myFinishRadio[i].value;
			}
			
            //Get  Note
            myNote.text         = myNoteTextField.text;
            myNote.checkedState = myNoteCheckbox.value;

            //Get font
            if( (fontFamilyNameDrop.selectedIndex != familySelected) || (fontFamilyNameDrop.selectedIndex != styleSelected) ){
                registration_font = fontFamilyNameDrop.selection.text + '\t' + fontStyleNameDrop.selection.text;
            }
            
            var returnObj = {   measureUnit:       parseInt(measureDropDown.selection),
                                process:           myCMYKSwatches,
                                spot:              mySpotSwatches,
                                finish:            myFinishes,
                                note:              myNote,
                                slugPageSize:      myPageSizeSlugCheckbox.value,
                                slugTrimSize:      mySpreadSizeSlugCheckbox.value,
                                registration_font: registration_font
                            }

            return returnObj;
        };
    };

    function setText(myApp, doc, tf, swatchOBJ) {
        var tempString = "";
        var first = true;
        tf.contents = "";

        if (swatchOBJ.process.length > 0) {
            myApp.Tools.addColor(doc, "CB_Cyan",    ColorModel.PROCESS, [100, 0, 0, 0]);
            myApp.Tools.addColor(doc, "CB_Magenta", ColorModel.PROCESS, [0, 100, 0, 0]);
            myApp.Tools.addColor(doc, "CB_Yellow",  ColorModel.PROCESS, [0, 0, 100, 0]);
            myApp.Tools.addColor(doc, "CB_Black",   ColorModel.PROCESS, [0, 0, 0, 100]);

            var i = swatchOBJ.process.length;
            while (i--) {
                if(swatchOBJ.process[i].checkedState){
                    if (!first) {
                        insertPoint = tf.insertionPoints[-1].index;
                        tf.contents += " + ";
                        addonText = tf.characters.itemByRange(tf.insertionPoints[insertPoint],
                                    tf.insertionPoints[-1]);
                        addonText.fillColor = "Registration";
                    };
                    insertPoint = tf.insertionPoints[-1].index;
                    tf.contents += swatchOBJ.process[i].name;
                    addonText = tf.characters.itemByRange(tf.insertionPoints[insertPoint],
                                tf.insertionPoints[-1]);
                    addonText.fillColor = "CB_" + swatchOBJ.process[i].name;
                    first = false;
                }
            }
        };

        if (swatchOBJ.spot.length > 0) {
            var i = swatchOBJ.spot.length;
            while (i--) {
                if(swatchOBJ.spot[i].checkedState){
                    if (!first) {
                        insertPoint = tf.insertionPoints[-1].index;
                        tf.contents += " + ";
                        addonText = tf.characters.itemByRange(tf.insertionPoints[insertPoint],
                                    tf.insertionPoints[-1]);
                        addonText.fillColor = "Registration";
                    }
                    insertPoint = tf.insertionPoints[-1].index;
                    tf.contents += swatchOBJ.spot[i].name;
                    addonText = tf.characters.itemByRange(tf.insertionPoints[insertPoint],
                                tf.insertionPoints[-1]);
                    addonText.fillColor = swatchOBJ.spot[i].name;
                    first = false;
                }
            }
        };
        
        if (swatchOBJ.finish.length > 0) {
            var i = swatchOBJ.finish.length;
            while (i--) {
                if (swatchOBJ.finish[i].checkedState == true) {        
                    if (!first) {
                        insertPoint = tf.insertionPoints[-1].index;
                        tf.contents += " + ";
                        addonText = tf.characters.itemByRange(tf.insertionPoints[insertPoint],
                            tf.insertionPoints[-1]);
                        addonText.fillColor = "Registration";
                    }
                    insertPoint = tf.insertionPoints[-1].index;
                    tf.contents += swatchOBJ.finish[i].name;
                    addonText = tf.characters.itemByRange(tf.insertionPoints[insertPoint],
                                tf.insertionPoints[-1]);
                    addonText.fillColor = "Registration";
                    first = false;
                }
            }
        };
        
        if (swatchOBJ.note.checkedState) {
            if (!first) {
                insertPoint = tf.insertionPoints[-1].index;
                tf.contents += " + ";
                addonText = tf.characters.itemByRange(tf.insertionPoints[insertPoint],
                            tf.insertionPoints[-1]);
                addonText.fillColor = "Registration";
            }
            insertPoint = tf.insertionPoints[-1].index;
            tf.contents += swatchOBJ.note.text;
            addonText = tf.characters.itemByRange(tf.insertionPoints[insertPoint],
                        tf.insertionPoints[-1]);
            addonText.fillColor = "Registration";
            first = false;
        };
    };

    ////////////
    // expose //
    ////////////
    return {
        go : go
    };

})();
