/*

--------------------------------------------

    CB_Spine_Corrector.jsxinc       (A CoverBuilder Helper Script)
    An InDesign CS5 Javascript      (Tested in CS6)
    Version 1.1

    Bruno Herfst 2014

--------------------------------------------

*/

(function() {
    //////////////
    // privates //
    //////////////
    function getnewSpineUI(myApp, C){
        var  myMeasure = myApp.STools.getMeasurementUnits(myApp, C, true);
        var  mySpine   =  parseFloat(C.spine); // So we can load the old spine with into the UI
        var  myDialog  = app.dialogs.add({name:"New spine width", canCancel:true});
        with(myDialog){
            with(dialogColumns.add()){
               with(dialogRows.add()){
                   var spineField = measurementComboboxes.add({editUnits:myMeasure, editContents:String(mySpine),smallNudge:0.01,largeNudge:1,minWidth:100});
               }
               with(dialogRows.add()){
                    with(dialogColumns.add()){
                        var breakFramesCheckbox = checkboxControls.add({staticLabel:"Break frames over spine", checkedState:true});
                    }
               }
            }
        }
        if(myDialog.show() == true){
            // editValue returns postscript points. Which we will need to set the page height
            return {breakFrames: breakFramesCheckbox.checkedState, newSpinePT : myApp.NumCon.doRound(parseFloat(spineField.editValue),6)}; // Round this to X decimals InDesign can crash otherwise on long floats
        } else {
            myDialog.destroy();
            exit();
        }
    }

    function changeSpine(myApp) {
        var myCover = myApp.Tools.getActiveCover(myApp);
        if(!myCover){
            exit();
        }
        //check if cover is build with CoverBuilder
        var myOldSpine = parseFloat(myCover.metadataPreferences.getProperty("http://brunoherfst.com/","Settings[3]"));
        if(myOldSpine <= 0) {
            alert("Can’t find a spine!");
        }
        var C = myApp.XMP.retrieveCoverObject(myApp, myCover);
        var minimumPageWidth = myApp.NumCon.convert(myApp, myApp.Settings.minPageWidthINDD, "mm", C.measureUnit);

        // safe original rulers
        var myOldRulers = myApp.Tools.setRuler(myCover,C.measureUnit);

        // Tidy.
        var docBleed = myCover.documentPreferences.documentBleedTopOffset;
        // Update data if changed
        C.bleed = docBleed;

        //ref to spinepage
        var mSpine = myApp.Tools.getMasterPage(myApp, myCover, "CB-spine", 0);

        //let’s ask the user what the new spine should be
        var userSettings = getnewSpineUI(myApp, C);

        if(userSettings == null){
            //user pressed cancel
            exit();
        } else {
            var newSpinePT = userSettings.newSpinePT;
        }

        if ( isNaN(newSpinePT) ){
            alert("That was not a Number");
        } else if (newSpinePT < myApp.NumCon.convert(myApp, myApp.Settings.minPageWidthINDD, "mm", "pt")){
            alert("Spine-width should be at least " + myApp.NumCon.doRound(minimumPageWidth,3) + " " + myApp.STools.getMeasurementUnits(myApp, C));
            changeSpine(myApp); // Show UI to re enter new spinewidth
            exit();
        } else {
            if(userSettings.breakFrames){
                myApp.Helper.BreakFrames.thisCover(myApp, myCover);
            }
            // Make sure facing pages is on
            // so the spine will automaticly move the front and back cover.
            var userFacingPages = myCover.documentPreferences.facingPages;
            if(!userFacingPages) {
                myCover.documentPreferences.facingPages = true;
            }
            try{
                mSpine.page.resize(CoordinateSpaces.INNER_COORDINATES,
                    AnchorPoint.CENTER_ANCHOR,ResizeMethods.REPLACING_CURRENT_DIMENSIONS_WITH,
                    //[myApp.NumCon.mm2pt(newSpinePT), myApp.NumCon.mm2pt(mSpine.h)]);
                    [newSpinePT, myApp.NumCon.convert(myApp, mSpine.h, C.measureUnit, "pt")]);  //Width * Height in postscript points
            } catch (err){
                alert(err);
            }
            try{
                // Update cover object
                C.spine = myApp.NumCon.convert(myApp, newSpinePT, "pt", C.measureUnit);
                myApp.Slugs.updateSpineSlug(myApp,myCover,C);
            } catch (err){
                alert(err);
            }
            // Update XMP
            myApp.XMP.safeCoverObject(myApp, myCover, C);
            //set userPref back
            if(!userFacingPages) {
                myCover.documentPreferences.facingPages = false;
            }
        }

        // reset original rulers
        myApp.Tools.setRuler(myCover,myOldRulers);
    }
    ////////////
    // expose //
    ////////////
    return {
        changeSpine : changeSpine
    };

})();
