/*

--------------------------------------------

    CB_Spine_Corrector.jsxinc       (A CoverBuilder Helper Script)
    An InDesign CS5 Javascript      (Tested in CS6)
    Version 1.1

    Bruno Herfst 2014

--------------------------------------------

*/

(function() {
    //////////////
    // privates //
    //////////////
    function getnewSpineUI(myApp, C){
        var  myMeasure = myApp.STools.getMeasurementUnits(myApp, C, true);
        var  mySpine   =  parseFloat(C.spine); // So we can load the old spine with into the UI
        var  myDialog  = app.dialogs.add({name:"New spine width", canCancel:true});
        with(myDialog){
            with(dialogColumns.add()){
               with(dialogRows.add()){
                   var spineField = measurementComboboxes.add({editUnits:myMeasure, editContents:String(mySpine),smallNudge:0.01,largeNudge:1,minWidth:100});
               }
               with(dialogRows.add()){
                    with(dialogColumns.add()){
                        var breakFramesCheckbox = checkboxControls.add({staticLabel:"Break frames over spine", checkedState:true});
                    }
               }
            }
        }
        if(myDialog.show() == true){
            if(myApp.Settings.break_frames_on_spine_change != breakFramesCheckbox.checkedState){
                // Safe the updated preferences
                myApp.Settings.break_frames_on_spine_change = breakFramesCheckbox.checkedState;
                myApp.STools.saveUserSettings(myApp);
            }
            // editValue returns postscript points. Which we will need to set the page height
            return {newSpinePT : myApp.NumCon.doRound(parseFloat(spineField.editValue),6)}; // Round this to X decimals InDesign can crash on long floats
        } else {
            myDialog.destroy();
            exit();
        }
    }

    function changeSpine(myApp) {
        var myCover = myApp.Tools.getActiveCover(myApp, false);
        
        //check if cover is build with CoverBuilder
        var myOldSpine = parseFloat(myCover.metadataPreferences.getProperty("http://brunoherfst.com/","Settings[3]"));
        if(myOldSpine <= 0) {
            alert("Can't find a spine!");
        }
        
        var C = myApp.XMP.retrieveCoverObject(myApp, myCover);
        if(C.width <= 0){
            alert("Could not load CoverBuilder object from document.");
            return;
        }

        var check = myApp.Tools.checkCagainstDoc(myApp, myCover, C, true);
        if( !check.message.ok ){
            alert("Beware!\nThis template has been changed outside CoverBuilder and data is out of date:\n\n" + check.message.text);
        }
        if(check.C_changed){
            C = check.C;
        }

        //letâ€™s ask the user what the new spine should be
        var userSpineQuery = getnewSpineUI(myApp, C);

        if(userSpineQuery == null){
            //user pressed cancel
            exit();
        } else {
            var newSpinePT = userSpineQuery.newSpinePT;
        }

        if ( isNaN(newSpinePT) ){
            alert("That was not a Number");
        } else if (newSpinePT < myApp.Tools.getMinPageWidthINDD(myApp, "pt") ){
            var minimumPageWidth = myApp.Tools.getMinPageWidthINDD(myApp, C.measureUnit);
            alert("Spine-width should be at least " + myApp.NumCon.doRound(minimumPageWidth,3) + " " + myApp.STools.getMeasurementUnits(myApp, C));
            changeSpine(myApp); // Show UI to re enter new spinewidth
            exit();
        } else {
            if(myApp.Settings.break_frames_on_spine_change){
                myApp.Helper.BreakFrames.thisCover(myApp, myCover);
            }
            try{
                // Update cover object
                C.spine = myApp.NumCon.convert(myApp, newSpinePT, "pt", C.measureUnit, 6);
                // Update XMP
                myApp.XMP.safeCoverObject(myApp, myCover, C);
                // Update Spine Page
                updateSpinePage(myApp, myCover, C);
            } catch (e){
                alert("CoverBuilder Update C Object Error:\n" + e.message +  " (Line " + e.line + " in file " + e.fileName + ")");
            }

            myApp.Slugs.placeSizesInSlug(myApp, myCover, C);

        }
    }

    function updateSpinePage(myApp, myCover, C) {
        //Create ref to spinepage
        var mSpine = myApp.Tools.makePageInfoObject(myApp, myCover, myApp.Tools.getMasterPage(myApp, myCover, "CB-cover", "Spine"), C.measureUnit);
		if(mSpine == null){
			alert("Can't find a spine!");
			exit();
		}
		
        myApp.Tools.resizePage(myApp, myCover, mSpine.page, [myApp.NumCon.convert(myApp, C.spine, C.measureUnit, "pt"), myApp.NumCon.convert(myApp, mSpine.h, C.measureUnit, "pt")]);
        
    }
    
    ////////////
    // expose //
    ////////////
    return {
        changeSpine     : changeSpine,
        updateSpinePage : updateSpinePage
    };

})();
