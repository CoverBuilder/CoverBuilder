
/* --------------------------------------------

    CB_PreferencesUI.jsxinc
    A CoverBuilder Helper Script
    Version 1.1

    Bruno Herfst 2015 â€“ 2017

-------------------------------------------- */


(function() {
    //////////////
    // privates //
    //////////////
    $.localize = true; // Make sure ExtendScript localisation engine is enabled.

    var columnWidth = 450;

    function load_Pref_UI(myApp) {
      var originalSettings = myApp.Settings;

      var settings_changed = false;
      var plugin_changed   = false;

      var setWin = new Window ("dialog", "CoverBuilder " + String(myApp.Localise.UI['Preferences']) );
            setWin.orientation = "column";
            setWin.alignment = "left";
            setWin.justify = "left";
            setWin.alignChildren = "top";
            setWin.margins = [10,10,10,12];
            setWin.spacing = 0;

      var mainGroup = setWin.add ("group");
          mainGroup.orientation =  "row";
          mainGroup.alignment = "top";
          mainGroup.alignChildren = "top";

      var leftColumn = mainGroup.add ("group");
          leftColumn.orientation =  "column";
          leftColumn.alignChildren = "left";
          leftColumn.alignment = "left";
          
      var rightColumn = mainGroup.add ("group");
          rightColumn.orientation =  "column";

      var butColumn = setWin.add ("group");
          butColumn.orientation =  "column";
          butColumn.alignment = "right";

      //////////////////////
      // Start General panel
      var genPanel = leftColumn.add("panel", undefined, String(myApp.Localise.UI['General']) );
          genPanel.preferredSize.width = columnWidth;
          genPanel.margins = 20;
          genPanel.alignChildren = "left";
          genPanel.orientation = 'column';

      var showCBmenuCheckbox = genPanel.add ("checkbox", undefined, String(myApp.Localise.UI['Show_CoverBuilder_Menu']) );
          showCBmenuCheckbox.value = myApp.Settings.add_CoverBuilder_Menu;
      
      var slugSizeGroup = genPanel.add('group');
          slugSizeGroup.add('statictext', undefined, String(myApp.Localise.UI['Slugs']));

      var slugText = slugSizeGroup.add('edittext');
          slugText.characters = 5;
          slugText.text = String(myApp.Settings.Slugs.measure);
      
      var slugMeasureDD = slugSizeGroup.add ("dropdownlist", undefined, myApp.STools.localisedValidMeasurementUnits(myApp));
          slugMeasureDD.selection = myApp.Settings.Slugs.unit;
      
      function confirmMinSlug(){
          var minSlug  = myApp.NumCon.convert(myApp, 5, 0, slugMeasureDD.selection.index, 3);
          var slugSize = myApp.NumCon.convert(myApp, parseFloat(slugText.text), slugMeasureDD.selection.index, 0, 3);
          if( slugSize < minSlug ){
              var setMinSize = confirm( String(myApp.Localise.UIalert['Set_slug_to_recommended_min']) + minSlug + myApp.STools.getLocalisedUnits(myApp,slugMeasureDD.selection.index));
              if( setMinSize ) {
                  slugText.text = minSlug;
              }
          }
      }
      
      slugText.onChange = function(){
          confirmMinSlug();
      }
      slugMeasureDD.onChange = function(){
          confirmMinSlug();
      }
      
      var pageSlugCheckbox = genPanel.add ("checkbox", undefined, String(myApp.Localise.UI['Add_page_size_info_to_slug_area']) );
          pageSlugCheckbox.value = myApp.Settings.pageSizes_in_Slug;
      var spreadSlugCheckbox = genPanel.add ("checkbox", undefined, String(myApp.Localise.UI['Add_total_trim_info_to_slug_area']) );
          spreadSlugCheckbox.value = myApp.Settings.totalTrim_in_Slug;

      // START FONTS
      // -------------------------------------------------
      var regFontFamily = myApp.STools.getRegistrationFontFamilyName(myApp);
      var regFontStyle  = myApp.STools.getRegistrationFontStyleName(myApp);
      
      var myFamilyList = myApp.UI.getAvailableFontFamilies();
      var myStyleList  = [];
      var familySelected = 0;
      var styleSelected  = 0;
      
      var regFontExist = false;
      for (var i=0; i<myFamilyList.length; i++) {
        if(myFamilyList[i] == regFontFamily) {
            familySelected = i;
            regFontExist   = true;
        }
      }
      
      if( regFontExist ) { // Font is loaded
          var sysFontAvailableStyles = myApp.STools.getAvailableFontStyles( regFontFamily );
          if(sysFontAvailableStyles.length > 0) {
              myStyleList = sysFontAvailableStyles;
              for (var i=0; i<myStyleList.length; i++) {
                if(myStyleList[i] == regFontStyle) {
                    styleSelected = i;
                }
              }
          }
      } else { // Font is not loaded
          myFamilyList.unshift( "- " + regFontFamily + " -");
          if(regFontStyle != "") {
            myStyleList.unshift ( "- " + regFontStyle  + " -");
          } else {
            myStyleList.unshift ( "- " + "None" + " -");
          }
      }

      var fontGroup = genPanel.add('group');
          fontGroup.orientation =  "column";
          fontGroup.alignChildren = "left";
          fontGroup.add('statictext', undefined, String(myApp.Localise.UI['Registration_font']) );
          
      var fontFamilyNameDrop = fontGroup.add('dropdownlist',[0,0,180,30],undefined,{items:myFamilyList});
          fontFamilyNameDrop.selection = familySelected;          

      var fontStyleNameDrop = fontGroup.add('dropdownlist',[0,0,180,30],undefined,{items:myStyleList});
          fontStyleNameDrop.selection  = styleSelected;

      fontFamilyNameDrop.onChange = function() {
          fontStyleNameDrop.removeAll();
          var sysFontAvailableStyles = myApp.STools.getAvailableFontStyles(fontFamilyNameDrop.selection.text);
          for ( var i = 0; i < sysFontAvailableStyles.length; i++ ) {
              fontStyleNameDrop.add('item',sysFontAvailableStyles[i]);
          }
          fontStyleNameDrop.selection = 0;
      }

      // End General Panel
      ////////////////////

      ///////////////////////
      // Start New Cover panel
      var newCoverPanel = leftColumn.add("panel", undefined, String(myApp.Localise.UI['New_Cover']) );
          newCoverPanel.preferredSize.width = columnWidth;
          newCoverPanel.margins = 20;
          newCoverPanel.alignChildren = "left";
          newCoverPanel.orientation = 'column';
      
      var autoLoadFrontDocCheckbox = newCoverPanel.add ("checkbox", undefined, String(myApp.Localise.UI['Autoload_foremost_document']) );
          autoLoadFrontDocCheckbox.value = myApp.Settings.autoload_front_document;

      var autoLoadLastUsedCheckbox = newCoverPanel.add ("checkbox", undefined, String(myApp.Localise.UI['Autoload_last_used_settings']) );
          autoLoadLastUsedCheckbox.value = myApp.Settings.autoload_last_used_settings;
      // End New Cover Panel
      /////////////////////

      ////////////////////////
      // Start Photoshop panel
      var psPanel = leftColumn.add("panel", undefined, String(myApp.Localise.UI['Send_to_Photoshop']) );
          psPanel.preferredSize.width = columnWidth;
          psPanel.margins = 20;
          psPanel.alignChildren = "left";
          psPanel.orientation = 'column';

      var ppiGroup = psPanel.add('group');
          ppiGroup.orientation =  "row";
      var ppiText = ppiGroup.add('edittext');
          ppiText.characters = 5;
          ppiText.text = myApp.Settings.standardPPI;
          ppiGroup.add('statictext', undefined, 'PPI');

      var resFlagCheckbox = psPanel.add ("checkbox", undefined, String(myApp.Localise.UI['Ask_for_PPI_before_sending']) );
          resFlagCheckbox.value = myApp.Settings.ask_for_PPI_on_send;

      // ADD SHOW THIS AT SEND
      ////////////////////////

      // Add colour of preview layers here
      // No, should be automatically set by getting UIcolour so they become 'invissible'
      /*
      var dropshadowCheckbox = psPanel.add ("checkbox", undefined, "Add drop shadow to preview layers");
          dropshadowCheckbox.value = myApp.Settings.add_drop_shadow;
      var drawGuidesCheckbox = psPanel.add ("checkbox", undefined, "Add margin guides");
          drawGuidesCheckbox.value = myApp.Settings.add_margin_guides;
      */

      // End Photoshop Group
      //////////////////////

      //////////////////////
      // Start Plugin panel
      // Needs to be refacored
      // Issue 634912365239565348923

      var plugCount = myApp.Settings.pluginfo.length;;

      var scrollPanel = rightColumn.add("panel", undefined, String(myApp.Localise.UI['Plugins']) ); // ScrollPluginPanel
          scrollPanel.alignChildren = "top"; 
          scrollPanel.orientation   = 'row';

      var itemHeight  = 75;
      var itemPadding = 10;
      var itemCount   = 4;
      var scrollbarHeight = (itemHeight * itemCount) + (itemPadding * (itemCount-1));

      var pluginGroup = scrollPanel.add("group");
          pluginGroup.alignChildren = "left"; 
          pluginGroup.orientation   = 'column';

      var pluginPanels = new Array();

      var sbar = scrollPanel.add ("scrollbar", [0,0,20,scrollbarHeight]);
          sbar.minvalue = 0;
          sbar.maxvalue = plugCount-itemCount;
          sbar.value = 0;
          sbar.jumpdelta = 1;
          sbar.stepdelta = 1;

          sbar.onChanging = function () {
            showPluginsInUI(this.value, this.value+itemCount);
          };

      function updatePluginData(pluginData, plugIndex){
        settings_changed = true;
        plugin_changed   = true;
        myApp.Settings.pluginfo[plugIndex] = pluginData;
      }

      function showPluginsInUI(a, z){
        var child = pluginGroup.children.length;
        while ( child--) {
            pluginGroup.remove(pluginGroup.children[child]);
        }
        
        for ( var i=a; i < z; i++ ) {

          function pluginData(pluginData, plugIndex) {
            var BT_activated = [String(myApp.Localise.UI['Deactivate_Plugin']), String(myApp.Localise.UI['Activate_Plugin'])]; // button text
            var PD = pluginData;
            var PI = plugIndex;

            var pluginPanel    = pluginGroup.add("panel", undefined, PD.plugin_name);
                pluginPanel.preferredSize.height = itemHeight;
                pluginPanel.margins       = 20;
                pluginPanel.alignChildren = "left";
                pluginPanel.orientation   = 'row';

            var activeBut      = pluginPanel.add ("button", undefined, String(myApp.Localise.UI['Getting_State']) );
                activeBut.characters = 18;

            var launchCheckbox        = pluginPanel.add ("checkbox", undefined, String(myApp.Localise.UI['Autolaunch_after_each_build']) );
                launchCheckbox.value  = PD.launch_on_load;

            launchCheckbox.onClick = function (){
              PD.launch_on_load = launchCheckbox.value;
              updatePluginData(PD, PI);
            }

            activeBut.onClick = function () {
              if(activeBut.text == BT_activated[1]){
                PD.activated = true;
                // Show UI
                launchCheckbox.visible = true;
                activeBut.text = BT_activated[0];
              } else {
                PD.activated = false;
                // Hide UI
                launchCheckbox.visible = false;
                activeBut.text = BT_activated[1];
              }
              updatePluginData(PD, PI);
            }

            if(PD.activated == true){
              activeBut.text = BT_activated[0];
              launchCheckbox.visible = true;
            } else if (PD.activated == false) {
              activeBut.text = BT_activated[1];
              launchCheckbox.visible = false;
            }

            var getPluginData = function(){
              return PD;
            }

            var getplugIndex = function(){
              return PI;
            }

            public_interface = {
              getPluginData : getPluginData,
              getplugIndex  : getplugIndex
            };

            return public_interface;
          }

          pluginPanels[i] = new pluginData(myApp.Settings.pluginfo[i], i);

        }
        setWin.layout.layout( true ); 
      }

      // End Plugin Panel
      ///////////////////

      /////////////////////
      // Start button group
      var buttonGroup = butColumn.add ("group");
          buttonGroup.margins = 20;
          buttonGroup.orientation =  "row";
          buttonGroup.alignment = "right";

          //OK CANCEL buttons
          var cancelBut = buttonGroup.add ("button", undefined, String(myApp.Localise.UI['Cancel']), {name:"cancel"} );
          var buildBut = buttonGroup.add  ("button", undefined, String(myApp.Localise.UI['Save']), {name:"ok"} );

      // End Button Group
      ///////////////////

      // Load plugin data
      showPluginsInUI(0, Math.min(4,plugCount) );
      
      ///////////////////
      // START PROCESS UI
      if(setWin.show() == true){
        var menuRefreshed = false;
        // General panel
        var add_CoverBuilder_Menu  = showCBmenuCheckbox.value;
        
        var slug_measure = parseFloat(slugText.text);
        var slug_unit    = slugMeasureDD.selection.index;
        
        var pageSizes_in_Slug = pageSlugCheckbox.value;
        var totalTrim_in_Slug = spreadSlugCheckbox.value;

        if( add_CoverBuilder_Menu != myApp.Settings.add_CoverBuilder_Menu){
          myApp.Settings.add_CoverBuilder_Menu = add_CoverBuilder_Menu;
          settings_changed = true;
          
          if(add_CoverBuilder_Menu){
            menuRefreshed = true;
            myApp.IDmenu.load_CB_Menu(myApp);
          } else {
            myApp.IDmenu.unload_CB_Menu(myApp);
          }
        }
        
        if(slug_measure != myApp.Settings.Slugs.measure){
            settings_changed = true;
            myApp.Settings.Slugs.measure = slug_measure;
        }
        
        if(slug_unit != myApp.Settings.Slugs.unit){
            settings_changed = true;
            myApp.Settings.Slugs.unit = slug_unit;
        }
        
        if( pageSizes_in_Slug != myApp.Settings.pageSizes_in_Slug){
          settings_changed = true;
          myApp.Settings.pageSizes_in_Slug = pageSizes_in_Slug;
        }
        
        if( totalTrim_in_Slug != myApp.Settings.totalTrim_in_Slug){
          settings_changed = true;
          myApp.Settings.totalTrim_in_Slug = totalTrim_in_Slug;
        }
        
        if(fontFamilyNameDrop.selection.index != familySelected){
            myApp.Settings.registration_font = String(fontFamilyNameDrop.selection.text) + '\t' + String(fontStyleNameDrop.selection.text);
            settings_changed = true;
        }

        // New Cover panel
        var autoload_front_document     = autoLoadFrontDocCheckbox.value;
        var autoload_last_used_settings = autoLoadLastUsedCheckbox.value;
        if(autoload_front_document != myApp.Settings.autoload_front_document){
          myApp.Settings.autoload_front_document = autoload_front_document;
          settings_changed = true;
        }
        if(autoload_last_used_settings != myApp.Settings.autoload_last_used_settings){
          myApp.Settings.autoload_last_used_settings = autoload_last_used_settings;
          settings_changed = true;
        }

        // Photoshop panel
        var standardPPI = parseInt(ppiText.text);
        if(standardPPI != myApp.Settings.standardPPI){
          myApp.Settings.standardPPI = standardPPI;
          settings_changed = true;
        }

        var ask_for_PPI_on_send = resFlagCheckbox.value;
        if(ask_for_PPI_on_send != myApp.Settings.ask_for_PPI_on_send){
          myApp.Settings.ask_for_PPI_on_send = ask_for_PPI_on_send;
          settings_changed = true;
        }

        // Plugin panel
        if(plugin_changed && myApp.Settings.add_CoverBuilder_Menu && !menuRefreshed){
          myApp.IDmenu.load_CB_Menu(myApp);
        }
        
        // Update settings
        if( settings_changed ){
          // Save the settings without changing plugin data
          myApp.STools.saveUserSettings(myApp);
        }
        // END PROCESS UI
        /////////////////
        return settings_changed;
      } else {
        // User pressed cancel. Make sure there are no changes to the settings 
        myApp.Settings = originalSettings;
      }
      return false;
    }

    ////////////
    // expose //
    ////////////
    return {
        load_Pref_UI : load_Pref_UI
    };

})();
